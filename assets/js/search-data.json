{
  
    
        "post0": {
            "title": "Byte-Pair Encoding (BPE) 알아보기",
            "content": "Subword Tokenization . Subword Tokenization이란 띄어쓰기(space)를 기준으로 나뉘는 단어보다 작지만 character(자/모)보다 큰 유닛(subword)으로 문장을 나누는 것으로 다음과 같은 장점이 있다. . 빈도가 낮은 단어, 사전에 없는 단어들도 (빈도가 높은) 서브 단어들의 조합으로 인코딩할 수 있다. | 따라서 적당한 크기의 사전으로 많은 단어를 커버할 수 있다. | 띄어쓰기를 안하는 언어(예. 중국어, 일본어) 처리에 용이하다. | 접사/어미 등이 실질적 의미를 갖는 어근, 어간에 달라 붙어 어절을 형성하는 교착어인 한국어 처리에 보다 용이하다. . Note: 형태소 분석을 해서 하나의 형태소를 하나의 subword로 취급하는 것이 아니다. BPE의 다양한 알고리즘을 huggingface의 설명을 참고해 정리해봤다. | &#44592;&#48376; &#50500;&#51060;&#46356;&#50612; . 훈련 방식 . 정규화 | pre-tokenization &amp; 기본 사전 만들기: 문장을 단어 단위로 나누기. 띄어쓰기 위주의 토큰화(e.g. GPT-2, Roberta 경우)도 가능하지만 보다 복잡한 토큰화를 사용할 수도 있다(GPT, XLM 등). 얻어진 토큰들을 기본 사전으로 삼고, 각 토큰들의 빈도수를 센다. | 위에서 구한 기본 사전들의 각 유닛들의 조합들 중 가장 빈도가 높은 조합을 사전에 추가한다. | 사전에 정한 크기에 사전이 될 때까지 (2)를 반복한다. | 예시 . (1) 사용하는 corpus가 pre-tokenization 이후 다음과 같은 토큰들과 빈도수를 갖는다고 가정할 때 . frquency = [(&quot;hug&quot;, 10), (&quot;pug&quot;, 5), (&quot;pun&quot;, 12), (&quot;bun&quot;, 4), (&quot;hugs&quot;, 5)] vocabulary = [&#39;b, &#39;g&#39;, &#39;h&#39;, &#39;n&#39;, &#39;p&#39;, &#39;s&#39;, &#39;u&#39;] &gt; &gt; [(&quot;h&quot; &quot;u&quot; &quot;g&quot;, 10), (&quot;p&quot; &quot;u&quot; &quot;g&quot;, 5), (&quot;p&quot; &quot;u&quot; &quot;n&quot;, 12), (&quot;b&quot; &quot;u&quot; &quot;n&quot;, 4), (&quot;h&quot; &quot;u&quot; &quot;g&quot; &quot;s&quot;, 5)] . (2) 사전에 등록된 아이템 조합 중 &#39;u&#39;+&#39;g&#39;가 가장 빈도가 높으므로 &#39;ug&#39;를 사전에 추가한다. . (&quot;h&quot; &quot;ug&quot;, 10), (&quot;p&quot; &quot;ug&quot;, 5), (&quot;p&quot; &quot;u&quot; &quot;n&quot;, 12), (&quot;b&quot; &quot;u&quot; &quot;n&quot;, 4), (&quot;h&quot; &quot;ug&quot; &quot;s&quot;, 5) &gt;&gt; vocabulary = [&#39;b, &#39;g&#39;, &#39;h&#39;, &#39;n&#39;, &#39;p&#39;, &#39;s&#39;, &#39;u&#39;, &#39;ug&#39;] # update . (3) 정해진 사전 크기까지 &#39;조합 + 사전 등록&#39; 반복. . note:&lt;/w&gt;와 같은 특별 토큰을 단어 끝에 붙여 단어간 경계를 표기하고 훈련시키기도 한다. . Byte-level BPE . Unicode가 아닌 Byte로 표현해 사전을 구성하기도 한다. 예를 들어 GPT-2는 바이트 기반으로 기본 사전을 만들기 때문에 256(==2^8)이라는 작은 크기의 기본 사전으로 1) 모든 영문자, 숫자와 일부 특수문자를 커버하고 2) 이들을 결합해 만든 50,000개의 조합과 이라는 스페셜 토큰을 추가해 총 50,257짜리 사전을 구성한다.&lt;/p&gt; 문제점 빈도수가 똑같은 서브워드 쌍(pair)들이 여러 있을 때 어떤 쌍을 우선시할지 애매하다. 추가되는 쌍에 따라 같은 단어가 여러가지 방법으로 다르게 인코딩 될 수 있으며, 이는 최종 성능 평가에 영향을 줄 수 있다. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; WordPiece . BPE와 기본 아이디어와 훈련 방식이 거의 비슷한 알고리즘이 여러 있다. BERT등이 사용하는 WordPiece도 그 중 하나인데, 사전에 추가하는 기준이 살짝 다르다. BPE는 단순 빈도로 평가했다면, WordPiece는 가능도(likelihood)를 따진다. 또 위 BPE는 바이트들을 결합시켜 새 유닛을 만드는 bottom-up 방식인 반면, WordPiece는 bottom-up은 물론 top-down 방식으로도 구현할 수 있다(한국어, 일본어, 중국어 등은 top-down은 안됨). . WordPiece를 소개한 논문도 이를 설명하는 블로그들도 정확히 어떻게 가능도를 따지는지 설명하거나 코드를 제시하지 않는다. 논문에서 &quot;Choose the new word unit out of all possible ones that increases the likelihood on the training data the most when added to the model&quot; 이라고 하니, unigram 모델의 maximum likelihood를 따지는 것 같다. . 즉 training corpus가 (hug, 10), (pug, 5), (pun, 12)라는 단어-카운트 쌍으로 이뤄져 있다고 가정하고, 가능한 조합쌍 &#39;pu&#39;와 &#39;ug&#39; 중 하나만 사전에 넣어야 한다면 . from collections import Counter import math corpus = [&#39;hug&#39;] * 10 + [&#39;pug&#39;] * 5 + [&#39;pun&#39;] * 12 counter = Counter(&#39;&#39;.join(corpus)) counts = counter.most_common() print(f&#39;basic vocabulary: {counts}&#39;) print(&#39;After 1st possible iteration&#39;) for cand in [&#39;pu&#39;, &#39;ug&#39;]: new_counter = counter.copy() for word in corpus: if cand in word: new_counter.update({cand:word.count(cand)}) for char in cand: new_counter.update({char:-1}) counts = new_counter.most_common() print(f&#39;possible candidate: {cand} &amp; updated vocabulary: {counts}&#39;) values = [v for (k,v) in counts if v &gt; 0] model_likelihood = math.prod(values) / sum(values)**len(values) print(f&#39;possible candidate: {cand} &amp; likelihood: {model_likelihood}&#39;) . basic vocabulary: [(&#39;u&#39;, 27), (&#39;p&#39;, 17), (&#39;g&#39;, 15), (&#39;n&#39;, 12), (&#39;h&#39;, 10)] After 1st possible iteration possible candidate: pu &amp; updated vocabulary: [(&#39;pu&#39;, 17), (&#39;g&#39;, 15), (&#39;n&#39;, 12), (&#39;h&#39;, 10), (&#39;u&#39;, 10), (&#39;p&#39;, 0)] possible candidate: pu &amp; likelihood: 0.0002849847078323364 possible candidate: ug &amp; updated vocabulary: [(&#39;p&#39;, 17), (&#39;ug&#39;, 15), (&#39;u&#39;, 12), (&#39;n&#39;, 12), (&#39;h&#39;, 10), (&#39;g&#39;, 0)] possible candidate: ug &amp; likelihood: 0.0002932128470001566 . 단순 frequency를 따지는 BPE로 하면 &#39;pu&#39;(17)를 &#39;ug&#39;(15) 대신 사전에 등록해야 하지만, WordPiece는 모델의 가능도가 더 높은 &#39;ug&#39;를 추가한다. 물론 이는 bottom-up 알고리즘이며, space를 표기하는 space marker, 즉 _(underscore)를 고려하지 않은 예시이다. 그런데 BERT에 사용되었다는 top-down WordPiece 알고리즘은 BPE처럼 가능도 대신 단순 빈도를 따지고 subword unit 후보도 독특하게 구성하는 듯 하다. 여기 참고. . https://pytorch.org/tutorials/beginner/chatbot_tutorial.html https://wikidocs.net/22592 . Reference . huggingface: BPE Tokenizer Summary | huggingface: BPE Tokenization | google-tensorflow: Subword Tokenization | &lt;/div&gt; .",
            "url": "https://wjlee-ling.github.io/nlp_log/word%20embedding/bpe/wordpiece/unigram/sentencepiece/subword/2022/07/07/_07_07_byte_pair_encoding.html",
            "relUrl": "/word%20embedding/bpe/wordpiece/unigram/sentencepiece/subword/2022/07/07/_07_07_byte_pair_encoding.html",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "CS224N Assignment 1",
            "content": "CS224N Assignment 1: Exploring Word Vectors (25 Points) . Due 3:15pm, Tue Jan 11 . Welcome to CS224N! . Before you start, make sure you read the README.txt in the same directory as this notebook for important setup information. A lot of code is provided in this notebook, and we highly encourage you to read and understand it as part of the learning :) . If you aren&#39;t super familiar with Python, Numpy, or Matplotlib, we recommend you check out the review session on Friday. The session will be recorded and the material will be made available on our website. The CS231N Python/Numpy tutorial is also a great resource. . Assignment Notes: Please make sure to save the notebook as you go along. Submission Instructions are located at the bottom of the notebook. . # All Import Statements Defined Here # Note: Do not add to this list. # - import sys assert sys.version_info[0]==3 assert sys.version_info[1] &gt;= 5 from platform import python_version assert int(python_version().split(&quot;.&quot;)[1]) &gt;= 5, &quot;Please upgrade your Python version following the instructions in the README.txt file found in the same directory as this notebook. Your Python version is &quot; + python_version() from gensim.models import KeyedVectors from gensim.test.utils import datapath import pprint import matplotlib.pyplot as plt plt.rcParams[&#39;figure.figsize&#39;] = [10, 5] import nltk nltk.download(&#39;reuters&#39;) #to specify download location, optionally add the argument: download_dir=&#39;/specify/desired/path/&#39; from nltk.corpus import reuters import numpy as np import random import scipy as sp from sklearn.decomposition import TruncatedSVD from sklearn.decomposition import PCA START_TOKEN = &#39;&lt;START&gt;&#39; END_TOKEN = &#39;&lt;END&gt;&#39; np.random.seed(0) random.seed(0) # - . . [nltk_data] Downloading package reuters to /root/nltk_data... [nltk_data] Package reuters is already up-to-date! . Word Vectors . Word Vectors are often used as a fundamental component for downstream NLP tasks, e.g. question answering, text generation, translation, etc., so it is important to build some intuitions as to their strengths and weaknesses. Here, you will explore two types of word vectors: those derived from co-occurrence matrices, and those derived via GloVe. . Note on Terminology: The terms &quot;word vectors&quot; and &quot;word embeddings&quot; are often used interchangeably. The term &quot;embedding&quot; refers to the fact that we are encoding aspects of a word&#39;s meaning in a lower dimensional space. As Wikipedia states, &quot;conceptually it involves a mathematical embedding from a space with one dimension per word to a continuous vector space with a much lower dimension&quot;. . Part 1: Count-Based Word Vectors (10 points) . Most word vector models start from the following idea: . You shall know a word by the company it keeps (Firth, J. R. 1957:11) . Many word vector implementations are driven by the idea that similar words, i.e., (near) synonyms, will be used in similar contexts. As a result, similar words will often be spoken or written along with a shared subset of words, i.e., contexts. By examining these contexts, we can try to develop embeddings for our words. With this intuition in mind, many &quot;old school&quot; approaches to constructing word vectors relied on word counts. Here we elaborate upon one of those strategies, co-occurrence matrices (for more information, see here or here). . Co-Occurrence . A co-occurrence matrix counts how often things co-occur in some environment. Given some word $w_i$ occurring in the document, we consider the context window surrounding $w_i$. Supposing our fixed window size is $n$, then this is the $n$ preceding and $n$ subsequent words in that document, i.e. words $w_{i-n} dots w_{i-1}$ and $w_{i+1} dots w_{i+n}$. We build a co-occurrence matrix $M$, which is a symmetric word-by-word matrix in which $M_{ij}$ is the number of times $w_j$ appears inside $w_i$&#39;s window among all documents. . Example: Co-Occurrence with Fixed Window of n=1: . Document 1: &quot;all that glitters is not gold&quot; . Document 2: &quot;all is well that ends well&quot; . * &lt;START&gt; all that glitters is not gold well ends &lt;END&gt; . &lt;START&gt; | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . all | 2 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | . that | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 1 | 1 | 0 | . glitters | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | . is | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 0 | . not | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | . gold | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | . well | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 1 | 1 | . ends | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | . &lt;END&gt; | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | . Note: In NLP, we often add &lt;START&gt; and &lt;END&gt; tokens to represent the beginning and end of sentences, paragraphs or documents. In this case we imagine &lt;START&gt; and &lt;END&gt; tokens encapsulating each document, e.g., &quot;&lt;START&gt; All that glitters is not gold &lt;END&gt;&quot;, and include these tokens in our co-occurrence counts. . The rows (or columns) of this matrix provide one type of word vectors (those based on word-word co-occurrence), but the vectors will be large in general (linear in the number of distinct words in a corpus). Thus, our next step is to run dimensionality reduction. In particular, we will run SVD (Singular Value Decomposition), which is a kind of generalized PCA (Principal Components Analysis) to select the top $k$ principal components. Here&#39;s a visualization of dimensionality reduction with SVD. In this picture our co-occurrence matrix is $A$ with $n$ rows corresponding to $n$ words. We obtain a full matrix decomposition, with the singular values ordered in the diagonal $S$ matrix, and our new, shorter length-$k$ word vectors in $U_k$. . This reduced-dimensionality co-occurrence representation preserves semantic relationships between words, e.g. doctor and hospital will be closer than doctor and dog. . Notes: If you can barely remember what an eigenvalue is, here&#39;s a slow, friendly introduction to SVD. If you want to learn more thoroughly about PCA or SVD, feel free to check out lectures 7, 8, and 9 of CS168. These course notes provide a great high-level treatment of these general purpose algorithms. Though, for the purpose of this class, you only need to know how to extract the k-dimensional embeddings by utilizing pre-programmed implementations of these algorithms from the numpy, scipy, or sklearn python packages. In practice, it is challenging to apply full SVD to large corpora because of the memory needed to perform PCA or SVD. However, if you only want the top $k$ vector components for relatively small $k$ — known as Truncated SVD — then there are reasonably scalable techniques to compute those iteratively. . Plotting Co-Occurrence Word Embeddings . Here, we will be using the Reuters (business and financial news) corpus. If you haven&#39;t run the import cell at the top of this page, please run it now (click it and press SHIFT-RETURN). The corpus consists of 10,788 news documents totaling 1.3 million words. These documents span 90 categories and are split into train and test. For more details, please see https://www.nltk.org/book/ch02.html. We provide a read_corpus function below that pulls out only articles from the &quot;grain&quot; (i.e. news articles about corn, wheat, etc.) category. The function also adds &lt;START&gt; and &lt;END&gt; tokens to each of the documents, and lowercases words. You do not have to perform any other kind of pre-processing. . def read_corpus(category=&quot;grain&quot;): &quot;&quot;&quot; Read files from the specified Reuter&#39;s category. Params: category (string): category name Return: list of lists, with words from each of the processed files &quot;&quot;&quot; files = reuters.fileids(category) return [[START_TOKEN] + [w.lower() for w in list(reuters.words(f))] + [END_TOKEN] for f in files] . Let&#39;s have a look what these documents are like…. . reuters_corpus = read_corpus() pprint.pprint(reuters_corpus[:3], compact=True, width=100) . . [[&#39;&lt;START&gt;&#39;, &#39;china&#39;, &#39;daily&#39;, &#39;says&#39;, &#39;vermin&#39;, &#39;eat&#39;, &#39;7&#39;, &#39;-&#39;, &#39;12&#39;, &#39;pct&#39;, &#39;grain&#39;, &#39;stocks&#39;, &#39;a&#39;, &#39;survey&#39;, &#39;of&#39;, &#39;19&#39;, &#39;provinces&#39;, &#39;and&#39;, &#39;seven&#39;, &#39;cities&#39;, &#39;showed&#39;, &#39;vermin&#39;, &#39;consume&#39;, &#39;between&#39;, &#39;seven&#39;, &#39;and&#39;, &#39;12&#39;, &#39;pct&#39;, &#39;of&#39;, &#39;china&#39;, &#34;&#39;&#34;, &#39;s&#39;, &#39;grain&#39;, &#39;stocks&#39;, &#39;,&#39;, &#39;the&#39;, &#39;china&#39;, &#39;daily&#39;, &#39;said&#39;, &#39;.&#39;, &#39;it&#39;, &#39;also&#39;, &#39;said&#39;, &#39;that&#39;, &#39;each&#39;, &#39;year&#39;, &#39;1&#39;, &#39;.&#39;, &#39;575&#39;, &#39;mln&#39;, &#39;tonnes&#39;, &#39;,&#39;, &#39;or&#39;, &#39;25&#39;, &#39;pct&#39;, &#39;,&#39;, &#39;of&#39;, &#39;china&#39;, &#34;&#39;&#34;, &#39;s&#39;, &#39;fruit&#39;, &#39;output&#39;, &#39;are&#39;, &#39;left&#39;, &#39;to&#39;, &#39;rot&#39;, &#39;,&#39;, &#39;and&#39;, &#39;2&#39;, &#39;.&#39;, &#39;1&#39;, &#39;mln&#39;, &#39;tonnes&#39;, &#39;,&#39;, &#39;or&#39;, &#39;up&#39;, &#39;to&#39;, &#39;30&#39;, &#39;pct&#39;, &#39;,&#39;, &#39;of&#39;, &#39;its&#39;, &#39;vegetables&#39;, &#39;.&#39;, &#39;the&#39;, &#39;paper&#39;, &#39;blamed&#39;, &#39;the&#39;, &#39;waste&#39;, &#39;on&#39;, &#39;inadequate&#39;, &#39;storage&#39;, &#39;and&#39;, &#39;bad&#39;, &#39;preservation&#39;, &#39;methods&#39;, &#39;.&#39;, &#39;it&#39;, &#39;said&#39;, &#39;the&#39;, &#39;government&#39;, &#39;had&#39;, &#39;launched&#39;, &#39;a&#39;, &#39;national&#39;, &#39;programme&#39;, &#39;to&#39;, &#39;reduce&#39;, &#39;waste&#39;, &#39;,&#39;, &#39;calling&#39;, &#39;for&#39;, &#39;improved&#39;, &#39;technology&#39;, &#39;in&#39;, &#39;storage&#39;, &#39;and&#39;, &#39;preservation&#39;, &#39;,&#39;, &#39;and&#39;, &#39;greater&#39;, &#39;production&#39;, &#39;of&#39;, &#39;additives&#39;, &#39;.&#39;, &#39;the&#39;, &#39;paper&#39;, &#39;gave&#39;, &#39;no&#39;, &#39;further&#39;, &#39;details&#39;, &#39;.&#39;, &#39;&lt;END&gt;&#39;], [&#39;&lt;START&gt;&#39;, &#39;thai&#39;, &#39;trade&#39;, &#39;deficit&#39;, &#39;widens&#39;, &#39;in&#39;, &#39;first&#39;, &#39;quarter&#39;, &#39;thailand&#39;, &#34;&#39;&#34;, &#39;s&#39;, &#39;trade&#39;, &#39;deficit&#39;, &#39;widened&#39;, &#39;to&#39;, &#39;4&#39;, &#39;.&#39;, &#39;5&#39;, &#39;billion&#39;, &#39;baht&#39;, &#39;in&#39;, &#39;the&#39;, &#39;first&#39;, &#39;quarter&#39;, &#39;of&#39;, &#39;1987&#39;, &#39;from&#39;, &#39;2&#39;, &#39;.&#39;, &#39;1&#39;, &#39;billion&#39;, &#39;a&#39;, &#39;year&#39;, &#39;ago&#39;, &#39;,&#39;, &#39;the&#39;, &#39;business&#39;, &#39;economics&#39;, &#39;department&#39;, &#39;said&#39;, &#39;.&#39;, &#39;it&#39;, &#39;said&#39;, &#39;janunary&#39;, &#39;/&#39;, &#39;march&#39;, &#39;imports&#39;, &#39;rose&#39;, &#39;to&#39;, &#39;65&#39;, &#39;.&#39;, &#39;1&#39;, &#39;billion&#39;, &#39;baht&#39;, &#39;from&#39;, &#39;58&#39;, &#39;.&#39;, &#39;7&#39;, &#39;billion&#39;, &#39;.&#39;, &#39;thailand&#39;, &#34;&#39;&#34;, &#39;s&#39;, &#39;improved&#39;, &#39;business&#39;, &#39;climate&#39;, &#39;this&#39;, &#39;year&#39;, &#39;resulted&#39;, &#39;in&#39;, &#39;a&#39;, &#39;27&#39;, &#39;pct&#39;, &#39;increase&#39;, &#39;in&#39;, &#39;imports&#39;, &#39;of&#39;, &#39;raw&#39;, &#39;materials&#39;, &#39;and&#39;, &#39;semi&#39;, &#39;-&#39;, &#39;finished&#39;, &#39;products&#39;, &#39;.&#39;, &#39;the&#39;, &#39;country&#39;, &#34;&#39;&#34;, &#39;s&#39;, &#39;oil&#39;, &#39;import&#39;, &#39;bill&#39;, &#39;,&#39;, &#39;however&#39;, &#39;,&#39;, &#39;fell&#39;, &#39;23&#39;, &#39;pct&#39;, &#39;in&#39;, &#39;the&#39;, &#39;first&#39;, &#39;quarter&#39;, &#39;due&#39;, &#39;to&#39;, &#39;lower&#39;, &#39;oil&#39;, &#39;prices&#39;, &#39;.&#39;, &#39;the&#39;, &#39;department&#39;, &#39;said&#39;, &#39;first&#39;, &#39;quarter&#39;, &#39;exports&#39;, &#39;expanded&#39;, &#39;to&#39;, &#39;60&#39;, &#39;.&#39;, &#39;6&#39;, &#39;billion&#39;, &#39;baht&#39;, &#39;from&#39;, &#39;56&#39;, &#39;.&#39;, &#39;6&#39;, &#39;billion&#39;, &#39;.&#39;, &#39;export&#39;, &#39;growth&#39;, &#39;was&#39;, &#39;smaller&#39;, &#39;than&#39;, &#39;expected&#39;, &#39;due&#39;, &#39;to&#39;, &#39;lower&#39;, &#39;earnings&#39;, &#39;from&#39;, &#39;many&#39;, &#39;key&#39;, &#39;commodities&#39;, &#39;including&#39;, &#39;rice&#39;, &#39;whose&#39;, &#39;earnings&#39;, &#39;declined&#39;, &#39;18&#39;, &#39;pct&#39;, &#39;,&#39;, &#39;maize&#39;, &#39;66&#39;, &#39;pct&#39;, &#39;,&#39;, &#39;sugar&#39;, &#39;45&#39;, &#39;pct&#39;, &#39;,&#39;, &#39;tin&#39;, &#39;26&#39;, &#39;pct&#39;, &#39;and&#39;, &#39;canned&#39;, &#39;pineapples&#39;, &#39;seven&#39;, &#39;pct&#39;, &#39;.&#39;, &#39;products&#39;, &#39;registering&#39;, &#39;high&#39;, &#39;export&#39;, &#39;growth&#39;, &#39;were&#39;, &#39;jewellery&#39;, &#39;up&#39;, &#39;64&#39;, &#39;pct&#39;, &#39;,&#39;, &#39;clothing&#39;, &#39;57&#39;, &#39;pct&#39;, &#39;and&#39;, &#39;rubber&#39;, &#39;35&#39;, &#39;pct&#39;, &#39;.&#39;, &#39;&lt;END&gt;&#39;], [&#39;&lt;START&gt;&#39;, &#39;sri&#39;, &#39;lanka&#39;, &#39;gets&#39;, &#39;usda&#39;, &#39;approval&#39;, &#39;for&#39;, &#39;wheat&#39;, &#39;price&#39;, &#39;food&#39;, &#39;department&#39;, &#39;officials&#39;, &#39;said&#39;, &#39;the&#39;, &#39;u&#39;, &#39;.&#39;, &#39;s&#39;, &#39;.&#39;, &#39;department&#39;, &#39;of&#39;, &#39;agriculture&#39;, &#39;approved&#39;, &#39;the&#39;, &#39;continental&#39;, &#39;grain&#39;, &#39;co&#39;, &#39;sale&#39;, &#39;of&#39;, &#39;52&#39;, &#39;,&#39;, &#39;500&#39;, &#39;tonnes&#39;, &#39;of&#39;, &#39;soft&#39;, &#39;wheat&#39;, &#39;at&#39;, &#39;89&#39;, &#39;u&#39;, &#39;.&#39;, &#39;s&#39;, &#39;.&#39;, &#39;dlrs&#39;, &#39;a&#39;, &#39;tonne&#39;, &#39;c&#39;, &#39;and&#39;, &#39;f&#39;, &#39;from&#39;, &#39;pacific&#39;, &#39;northwest&#39;, &#39;to&#39;, &#39;colombo&#39;, &#39;.&#39;, &#39;they&#39;, &#39;said&#39;, &#39;the&#39;, &#39;shipment&#39;, &#39;was&#39;, &#39;for&#39;, &#39;april&#39;, &#39;8&#39;, &#39;to&#39;, &#39;20&#39;, &#39;delivery&#39;, &#39;.&#39;, &#39;&lt;END&gt;&#39;]] . Question 1.1: Implement distinct_words [code] (2 points) . Write a method to work out the distinct words (word types) that occur in the corpus. You can do this with for loops, but it&#39;s more efficient to do it with Python list comprehensions. In particular, this may be useful to flatten a list of lists. If you&#39;re not familiar with Python list comprehensions in general, here&#39;s more information. . Your returned corpus_words should be sorted. You can use python&#39;s sorted function for this. . You may find it useful to use Python sets to remove duplicate words. . def distinct_words(corpus): &quot;&quot;&quot; Determine a list of distinct words for the corpus. Params: corpus (list of list of strings): corpus of documents Return: corpus_words (list of strings): sorted list of distinct words across the corpus n_corpus_words (integer): number of distinct words across the corpus &quot;&quot;&quot; corpus_words = [] n_corpus_words = -1 # # Write your implementation here. corpus_words = [w for c in corpus for w in c] corpus_words = sorted(set(corpus_words)) n_corpus_words = len(corpus_words) # return corpus_words, n_corpus_words . # Run this sanity check # Note that this not an exhaustive check for correctness. # # Define toy corpus test_corpus = [&quot;{} All that glitters isn&#39;t gold {}&quot;.format(START_TOKEN, END_TOKEN).split(&quot; &quot;), &quot;{} All&#39;s well that ends well {}&quot;.format(START_TOKEN, END_TOKEN).split(&quot; &quot;)] test_corpus_words, num_corpus_words = distinct_words(test_corpus) # Correct answers ans_test_corpus_words = sorted([START_TOKEN, &quot;All&quot;, &quot;ends&quot;, &quot;that&quot;, &quot;gold&quot;, &quot;All&#39;s&quot;, &quot;glitters&quot;, &quot;isn&#39;t&quot;, &quot;well&quot;, END_TOKEN]) ans_num_corpus_words = len(ans_test_corpus_words) # Test correct number of words assert(num_corpus_words == ans_num_corpus_words), &quot;Incorrect number of distinct words. Correct: {}. Yours: {}&quot;.format(ans_num_corpus_words, num_corpus_words) # Test correct words assert (test_corpus_words == ans_test_corpus_words), &quot;Incorrect corpus_words. nCorrect: {} nYours: {}&quot;.format(str(ans_test_corpus_words), str(test_corpus_words)) # Print Success print (&quot;-&quot; * 80) print(&quot;Passed All Tests!&quot;) print (&quot;-&quot; * 80) . -- Passed All Tests! -- . Question 1.2: Implement compute_co_occurrence_matrix [code] (3 points) . Write a method that constructs a co-occurrence matrix for a certain window-size $n$ (with a default of 4), considering words $n$ before and $n$ after the word in the center of the window. Here, we start to use numpy (np) to represent vectors, matrices, and tensors. If you&#39;re not familiar with NumPy, there&#39;s a NumPy tutorial in the second half of this cs231n Python NumPy tutorial. . def compute_co_occurrence_matrix(corpus, window_size=4): &quot;&quot;&quot; Compute co-occurrence matrix for the given corpus and window_size (default of 4). Note: Each word in a document should be at the center of a window. Words near edges will have a smaller number of co-occurring words. For example, if we take the document &quot;&lt;START&gt; All that glitters is not gold &lt;END&gt;&quot; with window size of 4, &quot;All&quot; will co-occur with &quot;&lt;START&gt;&quot;, &quot;that&quot;, &quot;glitters&quot;, &quot;is&quot;, and &quot;not&quot;. Params: corpus (list of list of strings): corpus of documents window_size (int): size of context window Return: M (a symmetric numpy matrix of shape (number of unique words in the corpus , number of unique words in the corpus)): Co-occurence matrix of word counts. The ordering of the words in the rows/columns should be the same as the ordering of the words given by the distinct_words function. word2ind (dict): dictionary that maps word to index (i.e. row/column number) for matrix M. &quot;&quot;&quot; words, n_words = distinct_words(corpus) M = None word2ind = {} # # Write your implementation here. M = np.zeros((n_words, n_words)) for c in corpus: for i, word in enumerate(c): window_s = i-window_size if i-window_size&gt;=0 else 0 window_e = i+window_size+1 if i+window_size+1 &lt;= len(c)-1 else len(c) words_before = c[window_s:i] words_after = c[i+1:window_e] if word not in word2ind: word2ind[word] = words.index(word) for context in words_before + words_after: if context not in word2ind: word2ind[context] = words.index(context) M[word2ind[word], word2ind[context]] += 1 # return M, word2ind . # Run this sanity check # Note that this is not an exhaustive check for correctness. # # Define toy corpus and get student&#39;s co-occurrence matrix test_corpus = [&quot;{} All that glitters isn&#39;t gold {}&quot;.format(START_TOKEN, END_TOKEN).split(&quot; &quot;), &quot;{} All&#39;s well that ends well {}&quot;.format(START_TOKEN, END_TOKEN).split(&quot; &quot;)] M_test, word2ind_test = compute_co_occurrence_matrix(test_corpus, window_size=1) # Correct M and word2ind M_test_ans = np.array( [[0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,], [0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,], [0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,], [0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,], [0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,], [0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,], [1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,], [0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,], [0., 0., 1., 0., 1., 1., 0., 0., 0., 1.,], [1., 0., 0., 1., 1., 0., 0., 0., 1., 0.,]] ) ans_test_corpus_words = sorted([START_TOKEN, &quot;All&quot;, &quot;ends&quot;, &quot;that&quot;, &quot;gold&quot;, &quot;All&#39;s&quot;, &quot;glitters&quot;, &quot;isn&#39;t&quot;, &quot;well&quot;, END_TOKEN]) word2ind_ans = dict(zip(ans_test_corpus_words, range(len(ans_test_corpus_words)))) # Test correct word2ind assert (word2ind_ans == word2ind_test), &quot;Your word2ind is incorrect: nCorrect: {} nYours: {}&quot;.format(word2ind_ans, word2ind_test) # Test correct M shape assert (M_test.shape == M_test_ans.shape), &quot;M matrix has incorrect shape. nCorrect: {} nYours: {}&quot;.format(M_test.shape, M_test_ans.shape) # Test correct M values for w1 in word2ind_ans.keys(): idx1 = word2ind_ans[w1] for w2 in word2ind_ans.keys(): idx2 = word2ind_ans[w2] student = M_test[idx1, idx2] correct = M_test_ans[idx1, idx2] if student != correct: print(&quot;Correct M:&quot;) print(M_test_ans) print(&quot;Your M: &quot;) print(M_test) raise AssertionError(&quot;Incorrect count at index ({}, {})=({}, {}) in matrix M. Yours has {} but should have {}.&quot;.format(idx1, idx2, w1, w2, student, correct)) # Print Success print (&quot;-&quot; * 80) print(&quot;Passed All Tests!&quot;) print (&quot;-&quot; * 80) . -- Passed All Tests! -- . Question 1.3: Implement reduce_to_k_dim [code] (1 point) . Construct a method that performs dimensionality reduction on the matrix to produce k-dimensional embeddings. Use SVD to take the top k components and produce a new matrix of k-dimensional embeddings. . Note: All of numpy, scipy, and scikit-learn (sklearn) provide some implementation of SVD, but only scipy and sklearn provide an implementation of Truncated SVD, and only sklearn provides an efficient randomized algorithm for calculating large-scale Truncated SVD. So please use sklearn.decomposition.TruncatedSVD. . def reduce_to_k_dim(M, k=2): &quot;&quot;&quot; Reduce a co-occurence count matrix of dimensionality (num_corpus_words, num_corpus_words) to a matrix of dimensionality (num_corpus_words, k) using the following SVD function from Scikit-Learn: - http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.TruncatedSVD.html Params: M (numpy matrix of shape (number of unique words in the corpus , number of unique words in the corpus)): co-occurence matrix of word counts k (int): embedding size of each word after dimension reduction Return: M_reduced (numpy matrix of shape (number of corpus words, k)): matrix of k-dimensioal word embeddings. In terms of the SVD from math class, this actually returns U * S &quot;&quot;&quot; n_iters = 10 # Use this parameter in your call to `TruncatedSVD` M_reduced = None print(&quot;Running Truncated SVD over %i words...&quot; % (M.shape[0])) # # Write your implementation here. svd = TruncatedSVD(n_components=k, n_iter=n_iters) M_reduced = svd.fit_transform(M) # print(&quot;Done.&quot;) return M_reduced . # Run this sanity check # Note that this is not an exhaustive check for correctness # In fact we only check that your M_reduced has the right dimensions. # # Define toy corpus and run student code test_corpus = [&quot;{} All that glitters isn&#39;t gold {}&quot;.format(START_TOKEN, END_TOKEN).split(&quot; &quot;), &quot;{} All&#39;s well that ends well {}&quot;.format(START_TOKEN, END_TOKEN).split(&quot; &quot;)] M_test, word2ind_test = compute_co_occurrence_matrix(test_corpus, window_size=1) M_test_reduced = reduce_to_k_dim(M_test, k=2) # Test proper dimensions assert (M_test_reduced.shape[0] == 10), &quot;M_reduced has {} rows; should have {}&quot;.format(M_test_reduced.shape[0], 10) assert (M_test_reduced.shape[1] == 2), &quot;M_reduced has {} columns; should have {}&quot;.format(M_test_reduced.shape[1], 2) # Print Success print (&quot;-&quot; * 80) print(&quot;Passed All Tests!&quot;) print (&quot;-&quot; * 80) . Running Truncated SVD over 10 words... Done. -- Passed All Tests! -- . pprint.pprint([M_test, M_test_reduced]) . [array([[0., 0., 0., 0., 0., 0., 1., 0., 0., 1.], [0., 0., 1., 1., 0., 0., 0., 0., 0., 0.], [0., 1., 0., 0., 0., 0., 0., 0., 1., 0.], [0., 1., 0., 0., 0., 0., 0., 0., 0., 1.], [0., 0., 0., 0., 0., 0., 0., 0., 1., 1.], [0., 0., 0., 0., 0., 0., 0., 1., 1., 0.], [1., 0., 0., 0., 0., 0., 0., 1., 0., 0.], [0., 0., 0., 0., 0., 1., 1., 0., 0., 0.], [0., 0., 1., 0., 1., 1., 0., 0., 0., 1.], [1., 0., 0., 1., 1., 0., 0., 0., 1., 0.]]), array([[ 6.54802087e-01, 7.83221122e-01], [ 5.20200324e-01, -4.44089210e-16], [ 7.05647176e-01, -4.84057274e-01], [ 7.05647176e-01, 4.84057274e-01], [ 1.02780472e+00, 0.00000000e+00], [ 6.54802087e-01, -7.83221122e-01], [ 3.82258491e-01, -6.56224003e-01], [ 3.82258491e-01, 6.56224003e-01], [ 1.39420808e+00, 1.06179274e+00], [ 1.39420808e+00, -1.06179274e+00]])] . Question 1.4: Implement plot_embeddings [code] (1 point) . Here you will write a function to plot a set of 2D vectors in 2D space. For graphs, we will use Matplotlib (plt). . For this example, you may find it useful to adapt this code. In the future, a good way to make a plot is to look at the Matplotlib gallery, find a plot that looks somewhat like what you want, and adapt the code they give. . def plot_embeddings(M_reduced, word2ind, words): &quot;&quot;&quot; Plot in a scatterplot the embeddings of the words specified in the list &quot;words&quot;. NOTE: do not plot all the words listed in M_reduced / word2ind. Include a label next to each point. Params: M_reduced (numpy matrix of shape (number of unique words in the corpus , 2)): matrix of 2-dimensioal word embeddings word2ind (dict): dictionary that maps word to indices for matrix M words (list of strings): words whose embeddings we want to visualize &quot;&quot;&quot; # # Write your implementation here. indices = [word2ind[w] for w in words] # indices of the words to visualize target = M_reduced[indices] for w, t in zip(words, target): plt.plot(t[0], t[1], &quot;rx&quot;) plt.annotate(w, (t[0],t[1])) plt.show() # . # Run this sanity check # Note that this is not an exhaustive check for correctness. # The plot produced should look like the &quot;test solution plot&quot; depicted below. # print (&quot;-&quot; * 80) print (&quot;Outputted Plot:&quot;) M_reduced_plot_test = np.array([[1, 1], [-1, -1], [1, -1], [-1, 1], [0, 0]]) word2ind_plot_test = {&#39;test1&#39;: 0, &#39;test2&#39;: 1, &#39;test3&#39;: 2, &#39;test4&#39;: 3, &#39;test5&#39;: 4} words = [&#39;test1&#39;, &#39;test2&#39;, &#39;test3&#39;, &#39;test4&#39;, &#39;test5&#39;] plot_embeddings(M_reduced_plot_test, word2ind_plot_test, words) print (&quot;-&quot; * 80) . -- Outputted Plot: . -- . Question 1.5: Co-Occurrence Plot Analysis [written] (3 points) . Now we will put together all the parts you have written! We will compute the co-occurrence matrix with fixed window of 4 (the default window size), over the Reuters &quot;grain&quot; corpus. Then we will use TruncatedSVD to compute 2-dimensional embeddings of each word. TruncatedSVD returns U*S, so we need to normalize the returned vectors, so that all the vectors will appear around the unit circle (therefore closeness is directional closeness). Note: The line of code below that does the normalizing uses the NumPy concept of broadcasting. If you don&#39;t know about broadcasting, check out Computation on Arrays: Broadcasting by Jake VanderPlas. . Run the below cell to produce the plot. It&#39;ll probably take a few seconds to run. What clusters together in 2-dimensional embedding space? What doesn&#39;t cluster together that you might think should have? . # Run This Cell to Produce Your Plot # reuters_corpus = read_corpus() M_co_occurrence, word2ind_co_occurrence = compute_co_occurrence_matrix(reuters_corpus) M_reduced_co_occurrence = reduce_to_k_dim(M_co_occurrence, k=2) # Rescale (normalize) the rows to make them each of unit-length M_lengths = np.linalg.norm(M_reduced_co_occurrence, axis=1) M_normalized = M_reduced_co_occurrence / M_lengths[:, np.newaxis] # broadcasting words = [&#39;tonnes&#39;, &#39;grain&#39;, &#39;wheat&#39;, &#39;agriculture&#39;, &#39;corn&#39;, &#39;maize&#39;, &#39;export&#39;, &#39;department&#39;, &#39;barley&#39;, &#39;grains&#39;, &#39;soybeans&#39;, &#39;sorghum&#39;] plot_embeddings(M_normalized, word2ind_co_occurrence, words) . Running Truncated SVD over 7146 words... Done. . Write your answer here. . valid clusters: grains-wheat, grain-corn-sorghum, soybeans-maize-barley . bad clusters: agriculture-department, tonnes-grains . Part 2: Prediction-Based Word Vectors (15 points) . As discussed in class, more recently prediction-based word vectors have demonstrated better performance, such as word2vec and GloVe (which also utilizes the benefit of counts). Here, we shall explore the embeddings produced by GloVe. Please revisit the class notes and lecture slides for more details on the word2vec and GloVe algorithms. If you&#39;re feeling adventurous, challenge yourself and try reading GloVe&#39;s original paper. . Then run the following cells to load the GloVe vectors into memory. Note: If this is your first time to run these cells, i.e. download the embedding model, it will take a couple minutes to run. If you&#39;ve run these cells before, rerunning them will load the model without redownloading it, which will take about 1 to 2 minutes. . def load_embedding_model(): &quot;&quot;&quot; Load GloVe Vectors Return: wv_from_bin: All 400000 embeddings, each lengh 200 &quot;&quot;&quot; import gensim.downloader as api wv_from_bin = api.load(&quot;glove-wiki-gigaword-200&quot;) print(&quot;Loaded vocab size %i&quot; % len(wv_from_bin.key_to_index.keys())) #len(list(wv_from_bin.wv.index_to_key))) return wv_from_bin . . Warning: gensim이 4.0.0 이하 버전이면 wv_from_bin.index_to_key 에서 AttributeError: &amp;#8217;Word2VecKeyedVectors&amp;#8217; object has no attribute &amp;#8217;index_to_key&amp;#8217; 뜸. . # Run Cell to Load Word Vectors # Note: This will take a couple minutes # -- wv_from_bin = load_embedding_model() . Loaded vocab size 400000 . . Note: If you are receiving a &quot;reset by peer&quot; error, rerun the cell to restart the download. . Reducing dimensionality of Word Embeddings . Let&#39;s directly compare the GloVe embeddings to those of the co-occurrence matrix. In order to avoid running out of memory, we will work with a sample of 10000 GloVe vectors instead. Run the following cells to: . Put 10000 Glove vectors into a matrix M | Run reduce_to_k_dim (your Truncated SVD function) to reduce the vectors from 200-dimensional to 2-dimensional. | def get_matrix_of_vectors(wv_from_bin, required_words=[&#39;tonnes&#39;, &#39;grain&#39;, &#39;wheat&#39;, &#39;agriculture&#39;, &#39;corn&#39;, &#39;maize&#39;, &#39;export&#39;, &#39;department&#39;, &#39;barley&#39;, &#39;grains&#39;, &#39;soybeans&#39;, &#39;sorghum&#39;]): &quot;&quot;&quot; Put the GloVe vectors into a matrix M. Param: wv_from_bin: KeyedVectors object; the 400000 GloVe vectors loaded from file Return: M: numpy matrix shape (num words, 200) containing the vectors word2ind: dictionary mapping each word to its row number in M &quot;&quot;&quot; import random words = list(wv_from_bin.index_to_key) print(&quot;Shuffling words ...&quot;) random.seed(225) random.shuffle(words) words = words[:10000] print(&quot;Putting %i words into word2ind and matrix M...&quot; % len(words)) word2ind = {} M = [] curInd = 0 for w in words: try: M.append(wv_from_bin.get_vector(w)) word2ind[w] = curInd curInd += 1 except KeyError: continue for w in required_words: if w in words: continue try: M.append(wv_from_bin.get_vector(w)) word2ind[w] = curInd curInd += 1 except KeyError: continue M = np.stack(M) print(&quot;Done.&quot;) return M, word2ind . # Run Cell to Reduce 200-Dimensional Word Embeddings to k Dimensions # Note: This should be quick to run # -- M, word2ind = get_matrix_of_vectors(wv_from_bin) M_reduced = reduce_to_k_dim(M, k=2) # Rescale (normalize) the rows to make them each of unit-length M_lengths = np.linalg.norm(M_reduced, axis=1) M_reduced_normalized = M_reduced / M_lengths[:, np.newaxis] # broadcasting . Shuffling words ... Putting 10000 words into word2ind and matrix M... Done. Running Truncated SVD over 10012 words... Done. . Note: If you are receiving out of memory issues on your local machine, try closing other applications to free more memory on your device. You may want to try restarting your machine so that you can free up extra memory. Then immediately run the jupyter notebook and see if you can load the word vectors properly. If you still have problems with loading the embeddings onto your local machine after this, please go to office hours or contact course staff. . Question 2.1: GloVe Plot Analysis [written] (3 points) . Run the cell below to plot the 2D GloVe embeddings for [&#39;tonnes&#39;, &#39;grain&#39;, &#39;wheat&#39;, &#39;agriculture&#39;, &#39;corn&#39;, &#39;maize&#39;, &#39;export&#39;, &#39;department&#39;, &#39;barley&#39;, &#39;grains&#39;, &#39;soybeans&#39;, &#39;sorghum&#39;]. . What clusters together in 2-dimensional embedding space? What doesn&#39;t cluster together that you think should have? How is the plot different from the one generated earlier from the co-occurrence matrix? What is a possible cause for the difference? . words = [&#39;tonnes&#39;, &#39;grain&#39;, &#39;wheat&#39;, &#39;agriculture&#39;, &#39;corn&#39;, &#39;maize&#39;, &#39;export&#39;, &#39;department&#39;, &#39;barley&#39;, &#39;grains&#39;, &#39;soybeans&#39;, &#39;sorghum&#39;] plot_embeddings(M_reduced_normalized, word2ind, words) . Write your answer here. . Cosine Similarity . Now that we have word vectors, we need a way to quantify the similarity between individual words, according to these vectors. One such metric is cosine-similarity. We will be using this to find words that are &quot;close&quot; and &quot;far&quot; from one another. . We can think of n-dimensional vectors as points in n-dimensional space. If we take this perspective L1 and L2 Distances help quantify the amount of space &quot;we must travel&quot; to get between these two points. Another approach is to examine the angle between two vectors. . Instead of computing the actual angle, we can leave the similarity in terms of $similarity = cos( Theta)$. Formally the Cosine Similarity $s$ between two vectors $p$ and $q$ is defined as: . $$s = frac{p cdot q}{||p|| ||q||}, textrm{ where } s in [-1, 1] $$ . Question 2.2: Words with Multiple Meanings (1.5 points) [code + written] . Polysemes and homonyms are words that have more than one meaning (see this wiki page to learn more about the difference between polysemes and homonyms ). Find a word with at least two different meanings such that the top-10 most similar words (according to cosine similarity) contain related words from both meanings. For example, &quot;leaves&quot; has both &quot;go_away&quot; and &quot;a_structure_of_a_plant&quot; meaning in the top 10, and &quot;scoop&quot; has both &quot;handed_waffle_cone&quot; and &quot;lowdown&quot;. You will probably need to try several polysemous or homonymic words before you find one. . Please state the word you discover and the multiple meanings that occur in the top 10. Why do you think many of the polysemous or homonymic words you tried didn&#39;t work (i.e. the top-10 most similar words only contain one of the meanings of the words)? . Note: You should use the wv_from_bin.most_similar(word) function to get the top 10 similar words. This function ranks all other words in the vocabulary with respect to their cosine similarity to the given word. For further assistance, please check the GenSim documentation. . # Write your implementation here. myword = &#39;light&#39; wv_from_bin.most_similar(myword) # . [(&#39;bright&#39;, 0.6242774724960327), (&#39;dark&#39;, 0.6141002178192139), (&#39;lights&#39;, 0.6013951897621155), (&#39;lighter&#39;, 0.558175265789032), (&#39;heavy&#39;, 0.5408364534378052), (&#39;sunlight&#39;, 0.5362919569015503), (&#39;blue&#39;, 0.5349379777908325), (&#39;colored&#39;, 0.5282376408576965), (&#39;sky&#39;, 0.5239452719688416), (&#39;color&#39;, 0.513929009437561)] . Write your answer here. . adjective (in sense of &#39;bright): bright, dark, sunlight, color ... . | adjective (with regard to weight): heavy . | Question 2.3: Synonyms &amp; Antonyms (2 points) [code + written] . When considering Cosine Similarity, it&#39;s often more convenient to think of Cosine Distance, which is simply 1 - Cosine Similarity. . Find three words $(w_1,w_2,w_3)$ where $w_1$ and $w_2$ are synonyms and $w_1$ and $w_3$ are antonyms, but Cosine Distance $(w_1,w_3) &lt;$ Cosine Distance $(w_1,w_2)$. . As an example, $w_1$=&quot;happy&quot; is closer to $w_3$=&quot;sad&quot; than to $w_2$=&quot;cheerful&quot;. Please find a different example that satisfies the above. Once you have found your example, please give a possible explanation for why this counter-intuitive result may have happened. . You should use the the wv_from_bin.distance(w1, w2) function here in order to compute the cosine distance between two words. Please see the GenSim documentation for further assistance. . # Write your implementation here. w1, w2, w3 = &#39;clear&#39;, &#39;lucid&#39;, &#39;dark&#39; print(f&#39;distance b/w {w1} &amp; {w2}: {wv_from_bin.distance(w1,w2)}&#39;) print(f&#39;distance b/w {w1} &amp; {w3}: {wv_from_bin.distance(w1,w3)}&#39;) # . distance b/w clear &amp; lucid: 0.795678898692131 distance b/w clear &amp; dark: 0.616068959236145 . Write your answer here. . clear &amp; dark는 한두개의 feature 외에 대다수의 feature들은 상동하며 context도 비슷. 그러나 &#39;lucid&#39;는 &#39;clear&#39;의 비유적 뜻과 동의어로 feature나 분포가 살짝 다른 듯. | &#39;lucid&#39;의 상대적으로 적은 빈도로 인해 임베딩이 제대로 안됨? | Question 2.4: Analogies with Word Vectors [written] (1.5 points) . Word vectors have been shown to sometimes exhibit the ability to solve analogies. . As an example, for the analogy &quot;man : grandfather :: woman : x&quot; (read: man is to grandfather as woman is to x), what is x? . In the cell below, we show you how to use word vectors to find x using the most_similar function from the GenSim documentation. The function finds words that are most similar to the words in the positive list and most dissimilar from the words in the negative list (while omitting the input words, which are often the most similar; see this paper). The answer to the analogy will have the highest cosine similarity (largest returned numerical value). . pprint.pprint(wv_from_bin.most_similar(positive=[&#39;woman&#39;, &#39;grandfather&#39;], negative=[&#39;man&#39;])) . [(&#39;grandmother&#39;, 0.7608445286750793), (&#39;granddaughter&#39;, 0.7200808525085449), (&#39;daughter&#39;, 0.7168302536010742), (&#39;mother&#39;, 0.7151536345481873), (&#39;niece&#39;, 0.7005682587623596), (&#39;father&#39;, 0.6659887433052063), (&#39;aunt&#39;, 0.6623408794403076), (&#39;grandson&#39;, 0.6618767976760864), (&#39;grandparents&#39;, 0.644661009311676), (&#39;wife&#39;, 0.6445354223251343)] . Let $m$, $g$, $w$, and $x$ denote the word vectors for man, grandfather, woman, and the answer, respectively. Using only vectors $m$, $g$, $w$, and the vector arithmetic operators $+$ and $-$ in your answer, what is the expression in which we are maximizing cosine similarity with $x$? . Hint: Recall that word vectors are simply multi-dimensional vectors that represent a word. It might help to draw out a 2D example using arbitrary locations of each vector. Where would man and woman lie in the coordinate plane relative to grandfather and the answer? . Write your answer here. . Question 2.5: Finding Analogies [code + written] (1.5 points) . Find an example of analogy that holds according to these vectors (i.e. the intended word is ranked top). In your solution please state the full analogy in the form x:y :: a:b. If you believe the analogy is complicated, explain why the analogy holds in one or two sentences. . Note: You may have to try many analogies to find one that works! . # Write your implementation here. pprint.pprint(wv_from_bin.most_similar(positive=[&#39;france&#39;, &#39;berlin&#39;], negative=[&#39;paris&#39;])) # . [(&#39;germany&#39;, 0.8352416753768921), (&#39;german&#39;, 0.6844801902770996), (&#39;austria&#39;, 0.6128034591674805), (&#39;poland&#39;, 0.5813313722610474), (&#39;germans&#39;, 0.574868381023407), (&#39;munich&#39;, 0.5435905456542969), (&#39;belgium&#39;, 0.5324130058288574), (&#39;britain&#39;, 0.5295413732528687), (&#39;europe&#39;, 0.5244017839431763), (&#39;czech&#39;, 0.5152410864830017)] . Write your answer here. . france : paris = germany : berlin . Paris and Berlin are the capitals of France and Germany, respectively. . Question 2.6: Incorrect Analogy [code + written] (1.5 points) . Find an example of analogy that does not hold according to these vectors. In your solution, state the intended analogy in the form x:y :: a:b, and state the (incorrect) value of b according to the word vectors. . # Write your implementation here. pprint.pprint(wv_from_bin.most_similar(positive=[&#39;bake&#39;, &#39;rider&#39;], negative=[&#39;baker&#39;])) # . [(&#39;preheated&#39;, 0.45447373390197754), (&#39;riders&#39;, 0.42314770817756653), (&#39;foil&#39;, 0.420393168926239), (&#39;oven&#39;, 0.407988578081131), (&#39;bronc&#39;, 0.40597259998321533), (&#39;racks&#39;, 0.3952641189098358), (&#39;350-degree&#39;, 0.38831791281700134), (&#39;toothpick&#39;, 0.3834959864616394), (&#39;cyclists&#39;, 0.37487971782684326), (&#39;invert&#39;, 0.37485742568969727)] . Write your answer here. . bake : baker = preheated (?) = rider . Question 2.7: Guided Analysis of Bias in Word Vectors [written] (1 point) . It&#39;s important to be cognizant of the biases (gender, race, sexual orientation etc.) implicit in our word embeddings. Bias can be dangerous because it can reinforce stereotypes through applications that employ these models. . Run the cell below, to examine (a) which terms are most similar to &quot;girl&quot; and &quot;toy&quot; and most dissimilar to &quot;boy&quot;, and (b) which terms are most similar to &quot;boy&quot; and &quot;toy&quot; and most dissimilar to &quot;girl&quot;. Point out the difference between the list of female-associated words and the list of male-associated words, and explain how it is reflecting gender bias. . # Here `positive` indicates the list of words to be similar to and `negative` indicates the list of words to be # most dissimilar from. pprint.pprint(wv_from_bin.most_similar(positive=[&#39;girl&#39;, &#39;toy&#39;], negative=[&#39;boy&#39;])) print() pprint.pprint(wv_from_bin.most_similar(positive=[&#39;boy&#39;, &#39;toy&#39;], negative=[&#39;girl&#39;])) . [(&#39;toys&#39;, 0.7094953060150146), (&#39;doll&#39;, 0.5932914614677429), (&#39;dolls&#39;, 0.570662260055542), (&#39;barbie&#39;, 0.5407706499099731), (&#39;mattel&#39;, 0.5328551530838013), (&#39;accessories&#39;, 0.5206909775733948), (&#39;hasbro&#39;, 0.49227219820022583), (&#39;jewelry&#39;, 0.47385692596435547), (&#39;lego&#39;, 0.4690813422203064), (&#39;apparel&#39;, 0.46136239171028137)] [(&#39;toys&#39;, 0.71570885181427), (&#39;hasbro&#39;, 0.5164632797241211), (&#39;robot&#39;, 0.47317108511924744), (&#39;pet&#39;, 0.4670490324497223), (&#39;manufacturer&#39;, 0.4668163061141968), (&#39;mattel&#39;, 0.4582391679286957), (&#39;lego&#39;, 0.45811763405799866), (&#39;miniature&#39;, 0.4441472291946411), (&#39;makers&#39;, 0.44298243522644043), (&#39;manufactured&#39;, 0.44275349378585815)] . Write your answer here. . gender bias that girls love dolls and barbies while boys prefer robots and lego. . Question 2.8: Independent Analysis of Bias in Word Vectors [code + written] (1 point) . Use the most_similar function to find another case where some bias is exhibited by the vectors. Please briefly explain the example of bias that you discover. . # Write your implementation here. pprint.pprint(wv_from_bin.most_similar(positive=[&#39;man&#39;, &#39;nurse&#39;], negative=[&#39;woman&#39;])) pprint.pprint(wv_from_bin.most_similar(positive=[&#39;woman&#39;, &#39;doctor&#39;], negative=[&#39;man&#39;])) # . [(&#39;doctor&#39;, 0.5821742415428162), (&#39;nurses&#39;, 0.516983687877655), (&#39;hospital&#39;, 0.5130800604820251), (&#39;paramedic&#39;, 0.49569931626319885), (&#39;physician&#39;, 0.486096054315567), (&#39;training&#39;, 0.4692404866218567), (&#39;sergeant&#39;, 0.46916383504867554), (&#39;care&#39;, 0.46671396493911743), (&#39;trained&#39;, 0.4663393497467041), (&#39;anesthetist&#39;, 0.4631572663784027)] [(&#39;nurse&#39;, 0.6813318729400635), (&#39;physician&#39;, 0.6672453284263611), (&#39;doctors&#39;, 0.6173422336578369), (&#39;dentist&#39;, 0.5775880217552185), (&#39;surgeon&#39;, 0.5691418647766113), (&#39;hospital&#39;, 0.564996600151062), (&#39;pregnant&#39;, 0.5649074912071228), (&#39;nurses&#39;, 0.5590692758560181), (&#39;medical&#39;, 0.5542059540748596), (&#39;patient&#39;, 0.5518484711647034)] . Write your answer here. . Question 2.9: Thinking About Bias [written] (2 points) . Give one explanation of how bias gets into the word vectors. What is an experiment that you could do to test for or to measure this source of bias? . Write your answer here. . human bias가 인간이 직접 쓴 text에 반영되고, 이를 임베딩 모델이 학습하기 때문에 임베딩 모델은 인간의 편견도 학습하게 된다. . Submission Instructions . Click the Save button at the top of the Jupyter Notebook. | Select Cell -&gt; All Output -&gt; Clear. This will clear all the outputs from all cells (but will keep the content of all cells). | Select Cell -&gt; Run All. This will run all the cells in order, and will take several minutes. | Once you&#39;ve rerun everything, select File -&gt; Download as -&gt; PDF via LaTeX (If you have trouble using &quot;PDF via LaTex&quot;, you can also save the webpage as pdf. Make sure all your solutions especially the coding parts are displayed in the pdf, it&#39;s okay if the provided codes get cut off because lines are not wrapped in code cells). | Look at the PDF file and make sure all your solutions are there, displayed correctly. The PDF is the only thing your graders will see! | Submit your PDF on Gradescope. |",
            "url": "https://wjlee-ling.github.io/nlp_log/cs224n/word%20embedding/glove/2022/07/07/_05_17_cs224n_exploring_word_vectors.html",
            "relUrl": "/cs224n/word%20embedding/glove/2022/07/07/_05_17_cs224n_exploring_word_vectors.html",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Word2Vec Implementation",
            "content": "Pytorch로 Word2Vec의 SGNS 구현해 보았다. . reference: | . SGNS 논문 (Mikolov et al. 2013) | word2vec official notebook | https://www.jasonosajima.com/ns.html http://mccormickml.com/2017/01/11/word2vec-tutorial-part-2-negative-sampling/ . import os import pandas as pd import numpy as np import sentencepiece as spm from tqdm import tqdm main_dir = r&quot;/content/drive/MyDrive/Colab Notebooks/nlp/a2&quot; # 이 notebook이 저장된 폴더 주소 os.chdir(main_dir) np.random.seed(42) . Corpus &amp; Tokenization . SentencePiece로 Unigram Wordpiece로 한국어 word2vec를 진행했다. 훈련 데이터는 모두의말뭉치-신문기사(2021, 조선일보, 140MB)의 일부이다. 사전 크기는 5,000으로 정했으며, 추후 사용할 수 있게끔 special tokens (e.g. [PAD], [SEP], etc)도 사전에 등록하였다 (훈련은 안함). . 참고: | . https://github.com/google/sentencepiece/tree/master/python | https://github.com/paul-hyun/transformer-evolution/blob/master/tutorial/vocab_with_sentencepiece.ipynb | corpus = pd.read_csv(&#39;/content/drive/MyDrive/A2_TeamProject/data/cleaned_모두의말뭉치/모두의말뭉치-조선일보.csv&#39;) corpus.groupby(&#39;topic&#39;).nunique() . newpaper title body written_at . topic . IT/과학 1 | 2937 | 19457 | 605 | . 경제 1 | 5530 | 35929 | 668 | . 문화 1 | 1690 | 8345 | 541 | . 미용/건강 1 | 2569 | 17585 | 578 | . 사회 1 | 13362 | 82599 | 710 | . 생활 1 | 4831 | 31584 | 677 | . 스포츠 1 | 2983 | 18621 | 625 | . 연예 1 | 326 | 1837 | 251 | . 정치 1 | 4344 | 24469 | 631 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 다양한 범주의 본문을 random하게 추출하여 학습데이터를 만들었고, 구두점이나 기호들을 제거했다. 구두점/기호들은 대개 문맥적으로 의미가 떨어지는 한편, 그 수가 너무 많아 오버샘플링 된다. . indices = np.random.randint(0, len(corpus), 10000) corpus = corpus[&#39;body&#39;][indices].tolist() #기사의 본문만 추출해 사용. sentences = [] for paragraph in corpus: sents = paragraph.split(&#39;.&#39;) # 사용한 corpus의 단위가 paragraph 기반이라 sentence기반으로 바꿈. for sent in sents: if sent == &#39;&#39;: continue sent = sent.strip() for punc in &quot;.,!? &quot;&#39;_-$^&amp;*(){}[]&lt;&gt;/#+= :;&quot;: sent = sent.replace(punc, &#39;&#39;) sentences.append(sent) corpus_text = &#39; n&#39;.join(sentences) # SentencePiece는 input으로 one-sentence-per-line 요구함 # 확인 for sent in sentences[:3]: print(sent) with open(&#39;KorNews.txt&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f: f.write(corpus_text) . 선택권을 가진 미위팅이 백번을 선택했다 요즘 고수들의 초반 포석은 마치 복기를 구경하는 것 같다 패턴화한 10여 개 남짓의 정석이 반상에 반복적으로 주르르 펼쳐진다 . Word2Vec은 원래 word 단위로 학습되었고, 두 어절 이상의 단어(예시 &#39;White House&#39;)들 중 몇 개는 따로 사전에 등록해서 하나의 단위로 학습하게끔 했다. . 그러나 고립어인 영어와 달리, 한국어는 교착어로 조사/어미가 복잡하고 어절 단위로 사전을 구성하기에 부적합하기 때문에 여기서는 SentencePiece를 사용하여 단어 보다 작은 subword 단위로 토큰화하여 사전을 구성하려고 한다. . vocab_size = 10000 spm.SentencePieceTrainer.train(input=&#39;KorNews.txt&#39;, model_prefix=&#39;KorNews_Unigram&#39;, vocab_size=vocab_size, model_type=&#39;unigram&#39;, pad_id=0, pad_piece=&quot;[PAD]&quot;, unk_id=1, unk_piece=&quot;[UNK]&quot;, bos_id=2, bos_piece=&quot;[BOS]&quot;, eos_id=3, eos_piece=&quot;[EOS]&quot;, user_defined_symbols=[&quot;[SEP]&quot;, &quot;[CLS]&quot;, &quot;[MASK&quot;]) . sp = spm.SentencePieceProcessor() sp.load(os.path.join(main_dir, &quot;KorNews_Unigram.model&quot;)) vocab = {sp.id_to_piece(id): id for id in range(sp.get_piece_size())} . tokens = [] for sent in sentences: encoded = sp.encode(sent, out_type=int, add_bos=False, add_eos=False) tokens.append(encoded) . Skip-Gram Negative Sampling . Error Distribution . 논문에서 negative sampling에 필요한 error distribution을 구할 때 다음과 같은 확률을 이용한다. $$ P_n(w_i) = frac{U(w_i)^{3/4}}{ sum_{j=0}^{n}U(w_j)^{3/4}} $$ $U(w_i)$는 unigram probability이다. . 위 공식으로 각 단어가 추출될 확률을 구해 probs라는 변수에 저장한다. 해당 변수는 위에서 지정한 word2id의 인덱스를 따른다. (즉 [UNK], [SOS], [EOS] 토큰은 각각 0,1,2의 인덱스 가짐). 이 확률을 이용하여 negative example의 사전 id를 구하려면 . python 내장 random 라이브러리의 choices 함수를 사용하거나 | numpy.random.choice를 이용하면 된다 (이 경우에는 k만큼 반복) | matrix 사용하는 방법. 위 두 방법이 가장 간단하나 시간이 너무 오래 걸려 찾아 보았다. 이 방식은 1/2번 보다 훨씬 빠르나, 내 경우엔 vocab_size가 너무 커서 (vocab_size, vocab_size)만큼 생성할 때 부담. | import random, numpy indices = list(range(vocab_size)) ids = random.choice(indices, weigths=probs, k) # 1번 ids = [numpy.random.choice(indices, p=probs) for _ in range(k)] # 2번 . 윗 방법들이 시간/물리적으로 부담이 크기에 gensim의 word2vec 코드Word2Vec.make_cum_table()를 보고 참고한 sampling 방법이 아래 Skipgram._create_cumsum_table()과 Skipgram.sample_negatives()이다. 이 방법은 위 공식의 $P(w_i)$를 누적시킨 확률 array를 만들어 놓고, [0,1] 사이의 난수를 bisection-left방식 (np.searchsorted 참고)으로 누적 확률 array에 비교시켜 결과로 얻은 인덱스를 샘플링할 단어의 인덱스로 여기는 것이다. 예를 들어 사전 크기가 3이고 각 단어들의 샘플링 확률(0.75승 하여 완만하게 만든 확률)이 [0.1, 0.3, 0.6]일 때, cumsum_table은 [0.1, 0.4(=0.1+0.3), 1.0(=0.1+0.3+0.6)]이다. 생성한 난수가 0.28일 때 이 난수와 cumsum_table로 bisection search(left)를 하면 이 난수가 속할 section은 두번째 섹션(b/c 0.1 &lt; 0.28 &lt;= 0.4)이므로 negative sample로 추출할 단어 인덱스는 1이다. . Subsampling Probability $$ P(w_i) = 1 - sqrt{ frac{t}{f(w_i)}} $$ 논문에서는 빈도가 매우 높은 단어의 경우 오버샘플링 되어 빈도수가 적은 단어들보다 훨씬 업데이트가 될 가능성이 높은 만큼, 각 단어의 샘플링 추출 확률을 정해 훈련했다고 한다. 위 확률은 추출되지 않을 확률이다. t는 임의로 정하는 값이며, 논문에서는 1e-5로 했으나 나는 1e-4로 했다 (gensim은 (0,1e-5]의 값). . from collections import Counter n_neg_samples = 10 # &#39;k&#39; in the paper; # of negative samples per each pair (center word, positive context word) window_size = 2 # i.e. 2*2 context words. 원래는 center + 앞/뒤 context words를 다 포함하는 크기 class SkipgramSampler(): def __init__(self, tokens, vocab): &#39;&#39;&#39; Args: - tokens: List[List]. Each nested list should account for a sentence. - vocab: Dict{word:id}. Word2id &#39;&#39;&#39; self.tokens = tokens self.vocab_size = len(vocab) # word2id print(f&#39;vocab_size: {self.vocab_size}&#39;) self.vocab = vocab self.id2word = {id: w for w, id in vocab.items()} def _get_freq(self): &#39;&#39;&#39; get frequency of words &#39;&#39;&#39; counter = Counter(self.id2word.keys()) # update counter for sent_tokens in self.tokens: counter.update(sent_tokens) # calculate pure counts counts = [] for id in self.id2word.keys(): counts.append(counter[id]) counts = np.array(counts, dtype=float) freq = counts / counts.sum() return freq def _get_negative_sampling_prob(self, freq): probs = freq**0.75 probs /= probs.sum() return probs def _get_sub_sampling_prob(self, freq, t=3e-5): &#39;&#39;&#39; 논문의 공식과 다르게 버려질 확률이 아닌 뽑힐 확률. 논문에서는 t=1e-5 &#39;&#39;&#39; probs = np.sqrt(t / freq) #-np.sqrt(probs**-1 * 1e-5 ) + 1 return probs def _create_cumsum_table(self, freq): &#39;&#39;&#39; vocab 인덱스를 따름. 단어별 sampling 축적 확률. &#39;&#39;&#39; probs = self._get_negative_sampling_prob(freq) cumsum_table = np.cumsum(probs) assert cumsum_table[-1] - 1. &lt;= 1e-5 return cumsum_table def sample_skipgrams(self, window_size=2, k=5, return_ids=True): &#39;&#39;&#39; Args: - window_size: 2*window_size context words for each target word - k: num of the negative pairs per each true context word - return_ids : id로 출력 혹은 word(str)로 출력 Return: - pairs: [center_word, positive_context_word, negative_context_word_1, ..., negative_context_word_k] &#39;&#39;&#39; pairs, labels = [], [] freq = self._get_freq() subsampling_probs = self._get_sub_sampling_prob(freq) negsampling_probs = self._get_negative_sampling_prob(freq) cumsum_table = self._create_cumsum_table(negsampling_probs) discarded, saved = 0, 0 for sent in tqdm(self.tokens): sent_len = len(sent) for idx, center_id in enumerate(sent): idx_start = idx-window_size if idx-window_size &gt;= 0 else 0 idx_end = idx+window_size+1 if idx+window_size+1 &lt; sent_len else sent_len window = sent[idx_start:idx_end] pos_ids = [id for id in window if id != center_id] random_probs = np.random.random(len(pos_ids)) pos_sub_probs = np.array([subsampling_probs[id] for id in pos_ids]) pos_sub_probs = (random_probs &lt;= pos_sub_probs) # if to be sampled, True for pos_id, pos_sub_prob in zip(pos_ids, pos_sub_probs): if not pos_sub_prob: discarded += 1 continue saved += 1 neg_ids = self.sample_negatives(k, cumsum_table, [center_id]+ pos_ids) if return_ids: pairs.append([center_id, pos_id]) labels.append(1) for neg_id in neg_ids: pairs.append([center_id, neg_id]) labels.append(0) else: pairs.append([self.id2word[center_id], self.id2word[pos_id]]) labels.append(1) for w in [self.id2word[id] for id in neg_ids]: pairs.append([self.id2word[center_id], w]) labels.append(0) print(f&#39; nsaved: {saved} discarded: {discarded}&#39;) return pairs, labels def sample_negatives(self, k, cumsum_table, exceptions): &#39;&#39;&#39; unique하게 negaitve samples를 추출. center word와 true context words (i.e.exceptions)는 제거. &#39;&#39;&#39; neg_ids = [] exceptions = np.array(exceptions) while len(neg_ids) &lt; k: values = np.random.random(k-len(neg_ids)) #ids = self.random.choices(list(range(self.vocab_size)), weights=probabilities, k=k-len(neg_ids)) ids = np.searchsorted(cumsum_table, values, side=&#39;left&#39;) ids = np.setdiff1d(ids, exceptions) #unique하게 됨 neg_ids.extend(ids) return neg_ids ss = SkipgramSampler(tokens, vocab) pairs, labels = ss.sample_skipgrams(window_size=window_size, k=n_neg_samples, return_ids=True) print(f&#39;positive examples: {labels.count(1)} &amp; negative examples: {labels.count(0)}&#39;) . vocab_size: 10000 . 100%|██████████| 35174/35174 [01:26&lt;00:00, 405.61it/s] . saved: 1340766 discarded: 2283114 positive examples: 1340766 &amp; negative examples: 13407660 . 총 10,000 문장에서 positive: 1,340,766 단어쌍, negative: 13,407,660 단어쌍을 추출하였다. . 오랜 시간 걸려 추출한 n-gram samples을 저장하려면 . import json # write pairs = {&#39;center_words&#39;: centers, &#39;context_words&#39;:contexts} with open(os.path.join(main_dir, &#39;KorNews_SGNS_Pairs.json&#39;), &#39;w&#39;) as f: json.dump(pairs, f) # read json_dir = os.path.join(main_dir, &quot;KorNews_SGNS_Pairs.json&quot;) with open(json_dir, &#39;r&#39;) as f: pairs_dict = json.load(f) # pairs_dict[&#39;center_words&#39;] . from torch.utils.data import Dataset, DataLoader import torch class SKNS_Dataset(Dataset): def __init__(self, pairs, labels): self.pairs = pairs self.labels = labels def __len__(self): return len(self.pairs) def __getitem__(self, idx): return self.pairs[idx][0], self.pairs[idx][1], self.labels[idx] dataset = SKNS_Dataset(pairs,labels) . test_size = int(len(dataset) * 0.05) train_dataset, test_dataset = torch.utils.data.random_split(dataset, [len(dataset) - test_size, test_size]) train_dataloader = DataLoader(dataset, shuffle=True, batch_size=64, num_workers=4) test_dataloader = DataLoader(test_dataset, batch_size=32, num_workers=4) del dataset . SKNS &#47784;&#45944; . . Note: 항상 pytorch를 사용했었는데, 이번엔 좀 더 빠르고 가볍다는 pytorch-lightning을 이용해 훈련해보기로 했다. 기존에는 1) model 클래스와 인스턴스 만들고 dataloader-loop 안에서 2) loss계산과 back-propagation 3)checkpoint saving 을 하는 코드를 일일히 따로 작성해야 한다. 그런데 라이트닝에서는 model 클래스만 지정해주면 제공되는 Trainer를 이용해 간단히 훈련시킬 수 있다. Word2Vec은 사전 인덱스를 이용한 one-hot embedding이 아니라, 각 단어마다 300차원의 벡터를 생성하고 훈련시킨다. dataloader로 사전 인덱스를 배치로 받기 때문에 해당 인덱스에 해당하는 n-차원의 벡터로 바꿔주는 nn.Embedding layer를 사용한다. Word2Vec은 같은 단어가 센터(타겟)냐 컨텍스트냐에 따라 다른 벡터를 갖기 때문에 (vocab_size, embedding_size)의 임베딩 텐서를 두 개 생성해야 한다. . from torch import optim, nn import pytorch_lightning as pl embedding_dim = 256 # 논문은 300 center_vecs = nn.Embedding(vocab_size, embedding_dim) context_vecs = nn.Embedding(vocab_size, embedding_dim) class SKNS(pl.LightningModule): def __init__(self, center_vecs, context_vecs): super().__init__() self.centers = center_vecs self.contexts = context_vecs self.embed_size = self.centers.weight.shape[1] self.loss_fn = nn.BCEWithLogitsLoss() def forward(self, center_ids, context_ids): # in lightning, forward defines the prediction/inference actions batch_size = len(center_ids) V = self.centers(center_ids).view(batch_size, self.embed_size, 1) # (batch, embedding) -&gt; (batch, embed, 1) U = self.contexts(context_ids).view(batch_size, 1, self.embed_size) # (batch, embedding) -&gt; (batch, 1, embed) logits = torch.bmm(U, V).squeeze() # (batch, 1, 1) =&gt; (batch) return logits def training_step(self, batch, batch_idx): # training_step defines the train loop. It is independent of forward center_ids, context_ids, labels = batch labels = labels.float() logits = self(center_ids, context_ids) loss = self.loss_fn(logits, labels) self.log(&quot;train_loss&quot;, loss) return loss def validation_step(self, batch, batch_idx): center_ids, context_ids, labels = batch labels = labels.float() logits = self(center_ids, context_ids) loss = self.loss_fn(logits, labels) self.log(&quot;valid_loss&quot;, loss) def configure_optimizers(self): optimizer = optim.Adam(self.parameters(), lr=1e-3) scheduler = optim.lr_scheduler.LambdaLR(optimizer, lambda epoch:0.95 ** epoch) return { &quot;optimizer&quot;:optimizer, &quot;lr_scheduler&quot;:scheduler } def get_weights(self): return (self.centers.weight, self.contexts.weight) model = SKNS(center_vecs, context_vecs) trainer = pl.Trainer(accelerator=&#39;gpu&#39;, max_epochs=5, precision=16) . Using 16bit native Automatic Mixed Precision (AMP) GPU available: True, used: True TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs HPU available: False, using: 0 HPUs . . Note: loss 함수로 쓴 nn.BCEWithLogitsLoss() 는 binary classification에 쓸 수 있는 함수로 log(simoid(x)) 한 loss값을 계산해준다.label의 dtype은 int가 아닌 float이여야 한다. . pl.utilities.memory.garbage_collection_cuda() trainer.fit(model, train_dataloader, test_dataloader) # DataLoader 객체가 아닌 따른 Iterator여도 됨. . LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0] | Name | Type | Params -- 0 | centers | Embedding | 2.6 M 1 | contexts | Embedding | 2.6 M 2 | loss_fn | BCEWithLogitsLoss | 0 -- 5.1 M Trainable params 0 Non-trainable params 5.1 M Total params 10.240 Total estimated model params size (MB) . %reload_ext tensorboard %tensorboard --logdir=lightning_logs/ . Output hidden; open in https://colab.research.google.com to view. . &#47784;&#45944; &#54217;&#44032; . gensim을 이용하여 유의어/반의어 및 analogy test를 할 수 있다. . import gensim (centers, contexts) = model.get_weights() with open(&#39;KorNews_w2v_V.txt&#39;, &#39;w&#39;) as f: f.write(f&#39;{vocab_size-1} {embedding_dim} n&#39;) for w, ind in vocab.items(): f.write(f&#39;{w} {&quot; &quot;.join(map(str, centers[ind,:].detach().cpu().tolist() ))} n&#39;) w2v = gensim.models.KeyedVectors.load_word2vec_format(&#39;KorNews_w2v_V.txt&#39;) . 결과를 보면 어느 정도 학습이 된 것으로 보인다. 그러나 코퍼스의 출처가 작년 신문 기사다 보니 정치 관련 단어들은 비교적 학습이 잘 된 반면, 일반명사나 동사, 부사 등은 학습이 아쉬워 보인다. 게다가 subword 토크나이저는 대개 어절의 맨 앞에 나타나는 경우(&#39;▁중국&#39;)와 아닌 경우(&#39;중국&#39;)로 나눠 사전을 구성하는데, 두 경우다 제대로 훈련시키는 것도 해결해야할 과제이다. . w2v.most_similar(positive=[&#39;▁중국&#39;]) . [(&#39;▁한국&#39;, 0.41443902254104614), (&#39;▁미국&#39;, 0.4098540246486664), (&#39;▁일본&#39;, 0.38627344369888306), (&#39;▁세계&#39;, 0.3704119026660919), (&#39;▁20&#39;, 0.34667396545410156), (&#39;▁선수&#39;, 0.34340745210647583), (&#39;▁7&#39;, 0.3106424808502197), (&#39;▁트럼프&#39;, 0.3065921664237976), (&#39;▁국내&#39;, 0.3052994906902313), (&#39;▁우리&#39;, 0.30426502227783203)] . w2v.most_similar(positive=[&#39;중국&#39;]) . [(&#39;▁영&#39;, 0.27694588899612427), (&#39;마케팅&#39;, 0.2600131928920746), (&#39;▁기자들&#39;, 0.2560494542121887), (&#39;▁샘플&#39;, 0.24935927987098694), (&#39;▁밖에&#39;, 0.24410425126552582), (&#39;홍보관&#39;, 0.24130752682685852), (&#39;▁신한카드&#39;, 0.2389327883720398), (&#39;벼&#39;, 0.2308148890733719), (&#39;셧&#39;, 0.22932805120944977), (&#39;▁의견이&#39;, 0.22786958515644073)] . w2v.most_similar(positive=[&#39;▁대통령&#39;]) . [(&#39;▁청와대&#39;, 0.3450790047645569), (&#39;▁장관&#39;, 0.3396446704864502), (&#39;▁의원&#39;, 0.32314038276672363), (&#39;▁이후&#39;, 0.3140028119087219), (&#39;▁대통령이&#39;, 0.3101692497730255), (&#39;▁민주당&#39;, 0.30879759788513184), (&#39;▁정부&#39;, 0.3069238066673279), (&#39;▁문&#39;, 0.3028714060783386), (&#39;엔&#39;, 0.29196697473526), (&#39;▁미국&#39;, 0.28609851002693176)] . w2v.most_similar([&#39;▁트럼프&#39;]) . [(&#39;▁미&#39;, 0.358543336391449), (&#39;▁대통령이&#39;, 0.3487488031387329), (&#39;▁북한&#39;, 0.3468424677848816), (&#39;▁일본&#39;, 0.31102779507637024), (&#39;▁미국&#39;, 0.31074368953704834), (&#39;▁중국&#39;, 0.3065921664237976), (&#39;▁지난달&#39;, 0.2924591600894928), (&#39;▁총리&#39;, 0.2919672429561615), (&#39;▁대통령&#39;, 0.2834343910217285), (&#39;▁검찰&#39;, 0.26758497953414917)] . w2v.most_similar(positive=[&#39;▁내년&#39;]) . [(&#39;▁지난해&#39;, 0.2932113707065582), (&#39;▁9&#39;, 0.2712252736091614), (&#39;▁이날&#39;, 0.2705169916152954), (&#39;▁온라인&#39;, 0.2697073817253113), (&#39;▁올해&#39;, 0.2610678970813751), (&#39;▁2021&#39;, 0.2584304213523865), (&#39;▁AP&#39;, 0.25618451833724976), (&#39;▁감염자&#39;, 0.2545149326324463), (&#39;학년도&#39;, 0.24879765510559082), (&#39;▁이어&#39;, 0.24502748250961304)] . w2v.most_similar(positive=[&#39;을&#39;]) . [(&#39;를&#39;, 0.4446668028831482), (&#39;으로&#39;, 0.3875734508037567), (&#39;이&#39;, 0.3176490068435669), (&#39;고&#39;, 0.2827107608318329), (&#39;도&#39;, 0.25626111030578613), (&#39;은&#39;, 0.254934698343277), (&#39;에&#39;, 0.25474870204925537), (&#39;▁것&#39;, 0.23995378613471985), (&#39;하는&#39;, 0.2388738989830017), (&#39;과&#39;, 0.2370939552783966)] . w2v.most_similar([&#39;한다&#39;]) . [(&#39;했다&#39;, 0.48733481764793396), (&#39;할&#39;, 0.44905075430870056), (&#39;하는&#39;, 0.4311229884624481), (&#39;하고&#39;, 0.4263955354690552), (&#39;해&#39;, 0.4139285683631897), (&#39;됐다&#39;, 0.40646255016326904), (&#39;하기&#39;, 0.3861447274684906), (&#39;될&#39;, 0.3859519362449646), (&#39;돼&#39;, 0.3652912378311157), (&#39;하면서&#39;, 0.3618863821029663)] . w2v.most_similar([&#39;▁군&#39;]) . [(&#39;산&#39;, 0.3136850595474243), (&#39;▁다른&#39;, 0.2931358218193054), (&#39;▁주&#39;, 0.29162198305130005), (&#39;▁지난해&#39;, 0.28887131810188293), (&#39;▁청와대&#39;, 0.2820741534233093), (&#39;▁장&#39;, 0.2817824184894562), (&#39;▁문제&#39;, 0.27845048904418945), (&#39;▁20&#39;, 0.27788224816322327), (&#39;▁기&#39;, 0.2763606011867523), (&#39;▁대해&#39;, 0.26905715465545654)] . &#49688;&#51221;&#49324;&#54637; . 더 많은 학습데이터로 추가 학습 (문장 10,000개 선정하여 사전 만들고 및 학습하였음.) | 혹은 사전 크기를 줄이기 |",
            "url": "https://wjlee-ling.github.io/nlp_log/cs224n/word%20embedding/word2vec/pytorch/2022/06/10/_06_22_kor_word2vec_implementation.html",
            "relUrl": "/cs224n/word%20embedding/word2vec/pytorch/2022/06/10/_06_22_kor_word2vec_implementation.html",
            "date": " • Jun 10, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Word2Vec",
            "content": "# colab에서 실행할 시 준비과정 %cd &quot;/content/drive/MyDrive/Colab Notebooks/nlp/a2/&quot; . . /content/drive/MyDrive/Colab Notebooks/nlp/a2 . Word2Vec은 구글의 Mikolov가 제안한 word embedding 방식으로 기존의 통계적인 임베딩 방식 (e.g. tf-idf)과 달리 딥러닝 기반 임베딩으로 유의미한 성과를 냈다. Word2Vec의 Bag-of-Words 모델로 이는 단어의 어순 상관없이 어휘 빈도를 고려하는 방법을 말한다. Word2Vec은 skipgram, cbow라는 두가지 훈련 방법을 제시했다. . reference | . Efficient Estimation of Word Representations in Vector Space | CBOW . CBOW(Continuous Bag-of-Words)는 주어진 winodw내 고정된 수의 context words로(정확히 말해 해당 벡터들의 평균값으로) target word(중간 단어)를 맞추는 훈련 방식이다. 타겟 단어들은 모두 같은 weight를 공유한다. . Skip-gram . Skipgram은 CBOW와 정반대로 타겟 단어를 바탕으로 정해진 수의 앞뒤 단어들을 맞추는 모델이다. CBOW모다 훈련은 느리지만, 보다 적은 훈련 데이터 양으로도 좋은 성과를 내며, 빈도가 적은 단어도 보다 잘 표현한다고 한다. (그 이유는 CBOW는 1. 벡터의 평균을 내고 2. 타겟 단어 하나만 예측하기 때문에 아무래도 빈도가 높은 단어 위주로 예측하게 되기 때문에...?) 그래서 그런지 보통 skipgram으로 구현하는 경우가 많은 듯 하다. . 사전(10,000 단어)의 각 단어($w$)마다 target(중앙) 단어일 때의 벡터 $V_w$와 context 단어일 때의 벡터($U_w$)를 갖는다 ($V_w, U_w in mathbb{R^{300}} $). 현재 단어가 $C$일 때, $C$가 아닌 단어 $O$가 $C$의 앞뒤로 나타날 확률은 다음과 같이 정의한다. $$ P(O | C) = frac{exp({U_O}^ top V_C)}{ sum_{w}exp({U_w}^ top V_C)} $$ 즉 $U_O$, $V_C$의 내적(분자)을 통해 단어 O, C의 유사도를 구하고 이를 사전 전체를 두고 정규화(분모)한다. . 따라서 각 위치를 $t$라고 할 때 우도(likelihood)는 $$ 𝐿( theta) = prod_{t}^{T} prod_{-m leq j leq m}{P(W_{t+j} mid W_t ; theta)} space (j ne 0, m은 context size) $$ 이고 모델 전체의 cost는 negative log-likelilhood로서 $$ J( theta) = - frac{1}{T} log𝐿( theta)= - frac{1}{T} sum_{t} sum_{j} log{P(W_{t+j} mid W_t ; theta)} $$ 이다. (다만 위는 batch gradient descent임. 실제로는 대부분 SGD로 구현). Skipgram은 이 평균 로그 확률값을 줄이는 방향으로 훈련을 하게 된다. . . Note: 우도를 극대화 할수록 우도에 minus 씌운 cost는 극소화 된다. . Skip-gram&#51032; &#47785;&#51201;&#54632;&#49688; . softmax loss (categorical cross-entropy loss) . 현재 타겟 단어 (=center 단어) $C$에 context로 단어 $O$가 나타날 확률에다가 log를 씌운 값이 $ log{P(O mid C)}$이고, 이 때 $U_O, V_C$ 각각에 대해 미분값을 구하자면 . $$ frac{ partial}{ partial V_C} log P(O mid C) = frac{ partial}{ partial V_C} log frac{exp({U_O}^ top V_C)}{ sum_{w}exp({U_w}^ top V_C)} = frac{ partial}{ partial V_C}[{U_O}^ top V_C - log sum_{w}exp({U_w}^ top V_C)] = U_O - frac{1}{ sum_{w}exp({U_w}^ top V_C)} frac{ partial}{ partial V_C} sum_{w}exp({U_w}^ top V_C) = U_O - frac{1}{ sum_{w}exp({U_w}^ top V_C)} sum_{w}exp({U_w}^ top V_C)U_w = U_O - sum_{w}{ frac{exp({U_w}^ top V_C)}{ sum_{w}exp({U_w}^ top V_C)}U_w} = U_O - sum_{w}P(w mid C)U_w frac{ partial}{ partial U_O} log P(O mid C) = frac{ partial}{ partial U_O} log frac{exp({U_O}^ top V_C)}{ sum_{w}exp({U_w}^ top V_C)} = frac{ partial}{ partial U_O}{U_O}^ top V_C - frac{ partial}{ partial U_O} log sum_{w}exp({U_w}^ top V_C) = V_C - frac{1}{ sum_{w}exp({U_w}^ top V_C)} cdot frac{ partial}{ partial U_O}[exp({U_1}^ top V_C) + cdots+exp({U_O}^ top V_C)] = V_C - frac{1}{ sum_{w}exp({U_w}^ top V_C)} cdot exp({U_O}^ top V_C) cdot V_C = V_C - frac{exp({U_O}^ top V_C) }{ sum_{w}exp({U_w}^ top V_C)} cdot V_C = V_C - P(O mid C) cdot V_C $$error 값은 역시 위 log-likelihood 미분값의 음수값이므로 . $$ frac{ partial}{ partial V_C}J( theta;O,C) = - frac{ partial}{ partial V_C} log{P(O mid C)} = sum_{w}P(w mid C)U_w - U_O frac{ partial}{ partial U_O}J( theta;O,C) = - frac{ partial}{ partial U_O} log{P(O mid C)} = P(O mid C) cdot V_C - V_C $$ # word2vec.py def naiveSoftmaxLossAndGradient( centerWordVec, outsideWordIdx, outsideVectors, dataset ): &quot;&quot;&quot; Naive Softmax loss &amp; gradient function for word2vec models Implement the naive softmax loss and gradients between a center word&#39;s embedding and an outside word&#39;s embedding. This will be the building block for our word2vec models. For those unfamiliar with numpy notation, note that a numpy ndarray with a shape of (x, ) is a one-dimensional array, which you can effectively treat as a vector with length x. Arguments: centerWordVec -- numpy ndarray, center word&#39;s embedding in shape (word vector length, ) (v_c in the pdf handout) outsideWordIdx -- integer, the index of the outside word (o of u_o in the pdf handout) outsideVectors -- outside vectors is in shape (num words in vocab, word vector length) for all words in vocab (tranpose of U in the pdf handout) dataset -- needed for negative sampling, unused here. Return: loss -- naive softmax loss gradCenterVec -- the gradient with respect to the center word vector in shape (word vector length, ) (dJ / dv_c in the pdf handout) gradOutsideVecs -- the gradient with respect to all the outside word vectors in shape (num words in vocab, word vector length) (dJ / dU) &quot;&quot;&quot; ### YOUR CODE HERE (~6-8 Lines) ### Please use the provided softmax function (imported earlier in this file) ### This numerically stable implementation helps you avoid issues pertaining ### to integer overflow. inner = np.dot(outsideVectors, centerWordVec) # (N,D) @ (D,) -&gt; (N,) prob = softmax(inner)[:, np.newaxis] # (N,) -&gt; (N,1) loss = - np.log(prob[outsideWordIdx]) outsideVector = outsideVectors[outsideWordIdx] gradCenterVec = np.sum(outsideVectors * prob, axis=0) - outsideVector gradOutsideVecs = np.dot(prob, centerWordVec[:, np.newaxis].T) gradOutsideVecs[outsideWordIdx] -= centerWordVec ### END YOUR CODE return loss, gradCenterVec, gradOutsideVecs . . . Note: colab상에서 코드 돌릴 때 함수를 제대로 짰는지 보려면 아래처럼 &#8217;[pyfile명] [fn이름]&#8217; 하면 된다 (과제 출제자가 만들어놓음). 대신 맨위에서 한대로 현재 a2 디렉토리여야 함. . !python word2vec.py naiveSoftmaxLossAndGradient . Negative Sampling . negative sampling 논문 | . Skip-gram은 타겟 단어 C와 컨텍스트 단어 O가 같이 나타나는 확률을 구하기 위해 C와 사전내 모든 어휘들의 내적을 구해야 된다(소프트맥스 함수를 쓰기 때문에). 사전의 크기만큼 전산이 필요하다는 단점을 극복하기 위해 Mikolov가 제시한 방법 중 하나가 negative sampling이다. &lt;/br&gt; Negative sampling은 Noise Contrastive Estimation을 활용한 방식인데, 이는 좋은 모델이라면 노이즈 분포와 원래 데이터 분포를 구별해낼 수 있다는 전제를 기반으로 한다. 예를 들어 원래 데이터셋에 &quot;I like pizza&quot;라는 문장이 있고 타겟 단어가 &#39;like&#39;이며 window 크기가 1일 때, positive samples은 (like, I), (like, pizza)이다. 그런데 negative sampling은 (like, towoards)와 같은 negative samples, 즉 노이즈를 일부러 추가하여 모델에게 주어진 샘플이 원래 분포에 속하는지 아니면 노이즈 분포에 속하는지 logistic regression으로 판단하게 한다. . negative sampling objective . $$ log sigma({u_{w_O}}^ top v_{w_C}) + sum_{i=1}^{k} mathbb{E}_{w_i sim P_n{(w)}}[ log sigma ({-u_{w_i}}^ top v_{w_C})] $$ (k는 sampling size, $v$는 $w_C$가 타겟(인풋)일 때의 벡터, $u$는 $w_O$가 컨텍스트일 때의 벡터이다.) . . Note: 벡터 표기법이 논문에 따라 다르다. 지금까지 단어 w의 인풋 벡터는 $V_w$, 컨텍스트 벡터는 $U_w$라고 표기했는데, 아래에서는 각각 $v_{w_C}$, $u_{w_O}$로 표기한다. . . Note: 위 목적함수를 직관적으로 이해하기. $ log sigma({u_{w_O}}^ top v_{w_C})$는 두 벡터가 유사할수록(내적이 클수록) 0에 수렴한다. 그러나 $ sum_{i=1}^{k} mathbb{E}_{w_i sim P_n{(w)}}[ log sigma ({-u_{w_i}}^ top v_{w_C})]$에서는 두 벡터의 내적(i.e.${-u_{w_i}}^ top v_{w_C}$ )이 클수록 sigmoid 결과값은 0에 수렴하며, 결과적으로 $ log sigma ({-u_{w_i}}^ top v_{w_C})$ 는 $- infty$에 수렴한다. 즉 첫 항은 positive pair의 유사도로 maximize해야 하지만 두번째 항은 k개의 negative pairs의 유사도로 minimize해야 한다. k의 크기는 훈련 데이터셋 크기가 작을 때는 5~20, 클 때는 2~5로 충분하다고 한다. 다만 k개의 negative samples을 수집할 때 빈도가 높은 어휘(관사나 전치사 등)가 과수집되는 것을 막기 위해 노이즈 분포를 다음과 같이 정의해준다. $$ P_n(w)= frac{f(w)^{3/4}}{ sum_{i}^{V}f(w_i)^{3/4}} $$ frequency (Unigram)를 3/4 승하면 노이즈 분포를 완만하게 할 수 있는데, 이는 빈도가 극히 적은 어휘의 확률을 (예를 들어) 0.3에서 $0.405(=0.3^{3/4})$로 올려준다. . negative sampling loss and gradient . skip-gram처럼 목적함수의 negative를 negative sampling의 loss라고 하면 $$ J = - log sigma({u_{w_O}}^ top v_{w_C}) - sum_{i=1}^{k} mathbb{E}_{w_i sim P_n{(w)}}[ log sigma ({-u_{w_i}}^ top v_{w_C})] $$ 이고 따라서 center/target word vector에 대한 미분은 . $$ frac{ partial J}{ partial v_{w_C}} = - frac{1}{ sigma({u_{w_O}}^ top v_{w_C})} cdot sigma({u_{w_O}}^ top v_{w_C}) (1 - sigma({u_{w_O}}^ top v_{w_C})) cdot u_{w_O} - sum_{i=1}^{k} frac{1}{ sigma(-{u_{w_i}}^ top v_{w_C})} cdot sigma(-{u_{w_i}}^ top v_{w_C}) (1- sigma(-{u_{w_i}}^ top v_{w_C})) cdot -u_{w_i} =( sigma({u_{w_O}}^ top v_{w_C}) -1) cdot u_{w_O} + sum_{i=1}^{k} (1- sigma(-{u_{w_i}}^ top v_{w_C})) cdot u_{w_i} $$context word vector에 대한 미분은 $$ frac{ partial J}{ partial u_{w_X}} = - (1 - sigma({u_{w_O}}^ top v_{w_C})) cdot frac{ partial}{ partial u_{w_X}} {u_{w_O}}^ top v_{w_C} - sum_{i=1}^{k} (1- sigma(-{u_{w_i}}^ top v_{w_C})) cdot frac{ partial}{ partial u_{w_X}} ({-u_{w_i}}^ top v_{w_C}) $$ 여기서 $u_{w_X} = u_{w_O}$ 일 때는 (positive sample의 컨텍스트 단어 $w_O$에 대한 미분) $$ frac{ partial J}{ partial u_{w_O}} = - (1 - sigma({u_{w_O}}^ top v_{w_C})) cdot v_{w_C} $$ 반면 $u_{w_X} = u_{w_i}$ 일 때는 (즉 negative sample의 컨텍스트 단어 하나에 대한 미분; k만큼 업데이트) $$ frac{ partial J}{ partial u_{w_i}} = (1 - sigma({-u_{w_O}}^ top v_{w_C})) cdot v_{w_C} (i는 1 cdots k) $$ 위에서 $u_{w_O} = u_{w_i} $ 즉 컨텍스트 단어 하나가 positive pair와 동시에 negative pair로 추출될 수도 있다. 이때는 위 두식에 의해 두번 업데이트 된다. . def negSamplingLossAndGradient( centerWordVec, outsideWordIdx, outsideVectors, dataset, K=10 ): &quot;&quot;&quot; Negative sampling loss function for word2vec models Implement the negative sampling loss and gradients for a centerWordVec and a outsideWordIdx word vector as a building block for word2vec models. K is the number of negative samples to take. Note: The same word may be negatively sampled multiple times. For example if an outside word is sampled twice, you shall have to double count the gradient with respect to this word. Thrice if it was sampled three times, and so forth. Arguments/Return Specifications: same as naiveSoftmaxLossAndGradient &quot;&quot;&quot; # Negative sampling of words is done for you. Do not modify this if you # wish to match the autograder and receive points! negSampleWordIndices = getNegativeSamples(outsideWordIdx, dataset, K) indices = [outsideWordIdx] + negSampleWordIndices ### YOUR CODE HERE (~10 Lines) ### Please use your implementation of sigmoid in here. gradOutsideVecs = np.zeros(outsideVectors.shape) # (V, D) z = np.dot(outsideVectors[outsideWordIdx], centerWordVec) # (D,) @ (D,) -&gt; 1 probs = sigmoid(z) # plain skip-gram에서는 softmax loss = - np.log(probs) gradCenterVec = (probs-1) * outsideVectors[outsideWordIdx] gradOutsideVecs[outsideWordIdx] = (probs-1.) * centerWordVec # (D,); update gradient of the context vector for the positive pair for i in range(K): idx = negSampleWordIndices[i] probs_neg = sigmoid(-np.dot(outsideVectors[idx], centerWordVec)) loss -= np.log(probs_neg) gradCenterVec -= (probs_neg-1) * outsideVectors[idx] gradOutsideVecs[idx] += (1-probs_neg) * centerWordVec # update gradient of the context vector for each positive pair ### END YOUR CODE return loss, gradCenterVec, gradOutsideVecs .",
            "url": "https://wjlee-ling.github.io/nlp_log/cs224n/word%20embedding/word2vec/2022/06/02/_06_02_cs224n_a2_word2vec.html",
            "relUrl": "/cs224n/word%20embedding/word2vec/2022/06/02/_06_02_cs224n_a2_word2vec.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Tone&Fact 개발기",
            "content": "KoGPT2-taf . SKT의 KoGPT2를 기반으로 5개 주요 일간지(조선일보, 중앙일보, 동아일보, 한겨레, 경향신문)의 논조를 반영한 사설 문단을 생성하게끔 개발된 생성모델. . 개발 의도 및 활용 방안 예상 . 같은 정치 이슈를 두고 진보와 보수는 입장이 다르다. 이러한 입장차는 각각 진보와 보수를 대표하는 일간지인 한겨레/경향신문과 조선일보/중앙일보/동아일보들의 사설에도 반영될 것이다. 어떤 이슈에 있어서 진보와 보수의 입장차가 두드러지게 나타나는지 (혹 큰 차이가 없는지), 입장차가 있다면 일반인이 예상하는 언론사별 입장차에 부합하는지(예를 들어 “진보 언론은 ‘임신중절’에 있어 여성의 자기결정권 보호를 우선시할 것이다”), 언론사별 논조에 있어서 차이점은 없는지를 확인하기 위해서 이번 프로젝트를 기획했다. . 모델이 제대로 개발 된다면 다음과 같이 활용할 수 있다. . 이슈별 여론 파악 | . 최신 정치 이슈에 있어서 전반적인 여론 뿐만 아니라 진보/보수별 입장차를 파악할 수 있다. . 페이크 뉴스 탐지 | . 러시아가 SNS을 활용하여 페이크 뉴스를 광범위하게 배포하여 미 대선에 악영향을 미친 이후로 페이크 뉴스 탐지 기술의 중요도가 높아졌다. 페이크 뉴스 뿐만 하니라 딥러닝을 활용한 딥페이크 기술에 대한 우려가 크다. 실제로 GPT3 개발자들은 해당 언어모델을 오용하여 악의적인 생성물을 내는 것을 막기 위해 가장 큰 모델을 공개하지 않았다. 페이크 뉴스도 공신력을 높이기 위해 기존의 언론사를 사칭하는 경우가 있는데, 언론사별 논조에 맞게 사설(기사)을 생성할 수 있는 모델이 있다면 주어진 사설이 표기된 언론사의 평소 논조와 일치하는지 등을 판단해 페이크 뉴스인지 아닌지를 분별할 수 있는 모델 역시 추가로 만들 수 있다. (GAN의 생성/구별 구조 활용) . 다각도의 논점 파악 | . 실제 개발 후 다양한 정치적 이슈로 실험해 보니, 내가 생각해 보지 못했던 논거를 제시하는 것을 보고 놀랐다. 후술하겠지만 총 여섯개(주요 일간지 5개 + 언론사 불특정)의 결과물을 모델이 생성하는데, 이 결과물들이 서로 다르다. 논술을 준비하는 학생들이 다양한 논거를 파악하거나, 기사 생성기가 최종 결과물을 결정할 때 비교할 수 있는 후보들을 확보할 수 있다. . 개발 환경 및 모델 선택 . pytorch, huggingface 라이브러리를 사용하여 개발하였다. 생성모델을 목표로 하였기 때문에 생성에 최적화된 GPT 모델 중 한국어로 훈련된 KoGPT2를 선택하게 되었다. 프로그래머스에서 매우 비싼 aws P3 인스턴스를 지원해 주었고, P3의 경우 16GB의 GPU가 달려 있기 때문에 카카오브레인에서 제공한 KoGPT를 파인튜닝 하려고 했다. 카카오의 모델이 SKT의 그것보다 배는 큰 모델인 만큼 아무래도 생성 결과물이 훨씬 자연스러웠기 때문이다. KoGPT측에서 말하는 최소 사양이 16GB라 아슬아슬하지만 문제는 없을 줄 알았는데, 문제는 이 최소사양이라는 게 추론(inference)을 위한 최소 사양이라는 것이었다. 즉 파인튜닝까지 하려면 더 큰 gpu가 필요했던 것이다. 허깅페이스에서 KoGPT의 사전 훈련된 웨이트를 다운받으면 12GB 정도 나오는데, 기본적으로 pytorch가 차지하는 GPU가 있는 모양이었다. GPU 사용을 최소화하려고 다음과 같은 기법(huggingface가 제공하는 방법들)을 사용했으나 메모리 부족은 여전했다. . batch 사이즈 줄임 (1까지…) | 변수 활용 최소화 (loss라는 변수 만들어서 iteration마다 누적 loss 측정하는 행위 등을 안함; 불가피하게 변수를 만들어야 할 경우 사용 후 바로 del ‘variable’, torch.cuda.empty_cache() 해줬음.) | gradient checkpointing (역전파를 위해 모든 unit의 함수를 저장하는 대신 일부만 저장; 시간은 늘어나나 메모리 활용은 줄어듬. 자세한 설명은 여기) | gradient accumulation (배치마다 업데이트 하지 않고 어느정도 누적함으로써 사실상 더 큰 batch로 훈련하는 효과를 누림.) | . 위의 기법을 다 활용하니 훈련 트레이닝 셋 배치를 토큰화하는 것도 안되다가 optimizer step에서 막히는 정도로 까지 메모리 최소화를 이뤄내긴 했다. 결론적으로 16GB의 램으로는 파인튜닝이 불가능해 카카오브레인을 포기하긴 했지만, 애초에 모델 임포트 자체로도 시간이 너무 걸리기 때문에 서비스용으로 적합하지 않았다 (그래서 teacher-student 구조로 knowledge distillation하려고 했으나 애초에 메모리 부족으로 훈련이 안됨…). 결국 SKT의 KoGPT2가 파인튜닝하고 서비스하기에 적합한 사이즈라고 판단하고 이를 기반으로 우리 모델을 만들기로 했다. . KoGPT-taf의 Tokenizer &amp; Model . SKT-KoGPT2가 사용하는 tokenizer 사전의 크기는 51,200이다. 그런데 KoGPT2의 경우 정치에 특화된 코퍼스에 훈련되지 않았기 때문에, ‘이명박’, ‘박근혜’, ‘문재인’, ‘윤석열’과 같은 주요 정치인의 이름은 물론 ‘청와대’와 같은 조직명과 ‘코로나’, ‘세월호’ 등 한국 정치사의 주요 사건을 하나의 토큰으로 인식하지 않는다. . 한국 정치에 특화된 모델을 지향하는 KoGPT-taf의 경우 정치 관련 주요 개체명을 따로 사전에 등록한 후 추가 훈련을 진행하였다. 추가할 개체명은 5개 주요 일간지별 만 개의 사설의 제목을 KoNLPy의 Komoran tagger로 분석, 명사만 추출한 후 빈도수를 측정하여 가장 빈도가 높은 고유명사들만 뽑아 선정하였다(불용어 + 의존명사는 제거함). . 참고로 빈도수 top 300개의 명사는 다음과 같다. (빈도수 추출 전 ) . # 빈도수 추출 전 다음과 같은 토큰을 불용어로 판단하고 제거 # [&#39;수&#39;, &#39;것&#39;, &#39;번&#39;, &#39;호&#39;, &#39;제&#39;, &#39;때&#39;, &#39;년&#39;, &#39;명&#39;, &#39;만&#39;, &#39;이번&#39;, &#39;인가&#39;] # top 300: [&#39;대통령&#39;, &#39;정부&#39;, &#39;국민&#39;, &#39;검찰&#39;, &#39;수사&#39;, &#39;미&#39;, &#39;정치&#39;, &#39;경제&#39;, &#39;일&#39;, &#39;한국&#39;, &#39;한&#39;, &#39;개혁&#39;, &#39;북&#39;, &#39;국회&#39;, &#39;대책&#39;, &#39;의혹&#39;, &#39;북한&#39;, &#39;청와대&#39;, &#39;법&#39;, &#39;책임&#39;, &#39;정책&#39;, &#39;정권&#39;, &#39;선거&#39;, &#39;말&#39;, &#39;필요&#39;, &#39;문제&#39;, &#39;박&#39;, &#39;위기&#39;, &#39;중&#39;, &#39;민주당&#39;, &#39;핵&#39;, &#39;장관&#39;, &#39;대화&#39;, &#39;안&#39;, &#39;계기&#39;, &#39;남북&#39;, &#39;후보&#39;, &#39;대선&#39;, &#39;사회&#39;, &#39;미국&#39;, &#39;대표&#39;, &#39;일본&#39;, &#39;나라&#39;, &#39;박근혜&#39;, &#39;문&#39;, &#39;조사&#39;, &#39;국정&#39;, &#39;코로나&#39;, &#39;비리&#39;, &#39;국가&#39;, &#39;기업&#39;, &#39;원전&#39;, &#39;중국&#39;, &#39;의원&#39;, &#39;사태&#39;, &#39;차&#39;, &#39;대응&#39;, &#39;대북&#39;, &#39;논란&#39;, &#39;국정원&#39;, &#39;외교&#39;, &#39;세월호&#39;, &#39;관계&#39;, &#39;인사&#39;, &#39;우려&#39;, &#39;사건&#39;, &#39;합의&#39;, &#39;이유&#39;, &#39;총리&#39;, &#39;야당&#39;, &#39;기대&#39;, &#39;사드&#39;, &#39;게&#39;, &#39;교육&#39;, &#39;원&#39;, &#39;시장&#39;, &#39;시대&#39;, &#39;여당&#39;, &#39;갈등&#39;, &#39;불법&#39;, &#39;안전&#39;, &#39;여야&#39;, &#39;안보&#39;, &#39;정상회담&#39;, &#39;평화&#39;, &#39;노조&#39;, &#39;금융&#39;, &#39;당&#39;, &#39;중단&#39;, &#39;규명&#39;, &#39;시민&#39;, &#39;역사&#39;, &#39;트럼프&#39;, &#39;돈&#39;, &#39;경찰&#39;, &#39;언론&#39;, &#39;김정은&#39;, &#39;협상&#39;, &#39;사과&#39;, &#39;세계&#39;, &#39;정상&#39;, &#39;방역&#39;, &#39;대&#39;, &#39;총장&#39;, &#39;권력&#39;, &#39;복지&#39;, &#39;길&#39;, &#39;속&#39;, &#39;통합&#39;, &#39;노동&#39;, &#39;세금&#39;, &#39;지원&#39;, &#39;현실&#39;, &#39;일자리&#39;, &#39;시작&#39;, &#39;혁신&#39;, &#39;판결&#39;, &#39;사퇴&#39;, &#39;논의&#39;, &#39;부동산&#39;, &#39;공무원&#39;, &#39;재벌&#39;, &#39;회담&#39;, &#39;이제&#39;, &#39;자&#39;, &#39;새누리당&#39;, &#39;방송&#39;, &#39;강화&#39;, &#39;결정&#39;, &#39;한반도&#39;, &#39;공약&#39;, &#39;인권&#39;, &#39;위&#39;, &#39;삼성&#39;, &#39;예산&#39;, &#39;해결&#39;, &#39;개입&#39;, &#39;주목&#39;, &#39;해법&#39;, &#39;비핵화&#39;, &#39;미래&#39;, &#39;특검&#39;, &#39;고용&#39;, &#39;참사&#39;, &#39;말라&#39;, &#39;선언&#39;, &#39;불안&#39;, &#39;민심&#39;, &#39;발언&#39;, &#39;자격&#39;, &#39;힘&#39;, &#39;끝&#39;, &#39;성장&#39;, &#39;문재인&#39;, &#39;거부&#39;, &#39;조작&#39;, &#39;확대&#39;, &#39;안철수&#39;, &#39;규제&#39;, &#39;조국&#39;, &#39;대비&#39;, &#39;법원&#39;, &#39;식&#39;, &#39;실패&#39;, &#39;사고&#39;, &#39;개편&#39;, &#39;윤석열&#39;, &#39;정당&#39;, &#39;교과서&#39;, &#39;시간&#39;, &#39;진실&#39;, &#39;건&#39;, &#39;씨&#39;, &#39;보수&#39;, &#39;군&#39;, &#39;4대강&#39;, &#39;요구&#39;, &#39;부실&#39;, &#39;소득&#39;, &#39;진상&#39;, &#39;반대&#39;, &#39;앞&#39;, &#39;위험&#39;, &#39;민주&#39;, &#39;공천&#39;, &#39;정&#39;, &#39;후보자&#39;, &#39;청년&#39;, &#39;사업&#39;, &#39;신뢰&#39;, &#39;은행&#39;, &#39;경고&#39;, &#39;변화&#39;, &#39;간&#39;, &#39;아베&#39;, &#39;과제&#39;, &#39;전환&#39;, &#39;검사&#39;, &#39;개선&#39;, &#39;대한민국&#39;, &#39;협력&#39;, &#39;서울&#39;, &#39;공개&#39;, &#39;사법&#39;, &#39;이상&#39;, &#39;국제&#39;, &#39;방치&#39;, &#39;사람&#39;, &#39;투표&#39;, &#39;포기&#39;, &#39;인상&#39;, &#39;대학&#39;, &#39;폐지&#39;, &#39;자유&#39;, &#39;백신&#39;, &#39;관리&#39;, &#39;연금&#39;, &#39;최저임금&#39;, &#39;총선&#39;, &#39;제재&#39;, &#39;탄핵&#39;, &#39;폭력&#39;, &#39;처리&#39;, &#39;도발&#39;, &#39;뿐&#39;, &#39;약속&#39;, &#39;대기업&#39;, &#39;경쟁&#39;, &#39;한국당&#39;, &#39;쇄신&#39;, &#39;전&#39;, &#39;미사일&#39;, &#39;금리&#39;, &#39;전략&#39;, &#39;텐가&#39;, &#39;인식&#39;, &#39;원칙&#39;, &#39;확인&#39;, &#39;외면&#39;, &#39;종&#39;, &#39;의지&#39;, &#39;피해&#39;, &#39;기회&#39;, &#39;등&#39;, &#39;노동자&#39;, &#39;이후&#39;, &#39;확산&#39;, &#39;위원장&#39;, &#39;손&#39;, &#39;사찰&#39;, &#39;학교&#39;, &#39;전쟁&#39;, &#39;공공&#39;, &#39;실&#39;, &#39;세&#39;, &#39;집값&#39;, &#39;재판&#39;, &#39;재난&#39;, &#39;입법&#39;, &#39;충격&#39;, &#39;단&#39;, &#39;제도&#39;, &#39;기관&#39;, &#39;적극&#39;, &#39;남&#39;, &#39;공정&#39;, &#39;추진&#39;, &#39;정신&#39;, &#39;테러&#39;, &#39;처&#39;, &#39;위안부&#39;, &#39;뒤&#39;, &#39;강행&#39;, &#39;탓&#39;, &#39;경영&#39;, &#39;파업&#39;, &#39;검증&#39;, &#39;공수&#39;, &#39;철회&#39;, &#39;보호&#39;, &#39;완화&#39;, &#39;이&#39;, &#39;성공&#39;, &#39;회장&#39;, &#39;걱정&#39;, &#39;전면&#39;, &#39;공단&#39;, &#39;진보&#39;, &#39;비판&#39;, &#39;운동&#39;, &#39;범죄&#39;, &#39;단체&#39;, &#39;학생&#39;, &#39;산업&#39;, &#39;집단&#39;, &#39;근본&#39;, &#39;군사&#39;, &#39;농&#39;, &#39;기준&#39;, &#39;판사&#39;] . 이중 최근 중요도를 임의로 판단하여 “박근혜”, “트럼프”, “김정은”, “문재인”, “안철수”, “윤석열”, “이명박”, “코로나”, “세월호”, “사드”, “새누리당”, “4대강”, “청와대”를 사전에 등록하였다. . 이에 KoGPT-taf의 토크나이저의 사전과 모델의 임베딩 레이어의 크기가 SKT-KoGPT2에 비해 13개 증가였다. . KoGPT-taf Tokenizer 사양 . vocab size max_length class special tokens . 51,213 | 128 | PreTrainedTokenizerFast (from HuggingFace) | &lt;/s&gt;, &lt;unk&gt;, &lt;pad&gt;, &lt;mask&gt; | . Model . model type # of hidden # of layers and heads 최대 생성 길이 . GPT2 | 768 | 12 | 128 토큰 | . 모델 훈련 . KoGPT2를 실험해 본 결과 그대로 활용하기엔 아쉬운 점이 몇몇 보였다. . 많이 부족한 생성 결과 | . 말그대로 부자연스러운 생성물이 많았다. . 뉴스라기엔 격식이 떨어지는 말투 | . 많은 대언어모델들이 그렇듯 웹문서를 마구잡이로 수집해 만든 코퍼스로 훈련되었기 때문에 생성물의 register가 뉴스의 그것과 달랐다. . 사실과 다른 결과물 | . 21년 상반기에 공개된 모델인만큼 KoGPT2는 ‘예전’의 문서들로 훈련되었는데, 이에 따라 현재의 정치적 상황과 다른 결과물이 여럿 발견되었다 (예를 들어 ‘전 대통령 박근혜’ 대신 ‘대통령 박근혜’라든지 박근혜 정부 때 얘기하면서 문 정부 때의 ‘박수현 대변인’을 제시하는 등). 즉 최신의 뉴스 문서들로 추가 훈련할 필요가 있었다. . 무엇보다 BERT나 OpenAI GPT가 모델의 크기에 비해 과소적합되어 있다면서 추가로 훈련을 진행하거나, 더 큰 데이터셋으로 훈련을 시킨 경우가 있었던 만큼(ALBERT 등) 우리 모델도 KoGPT2를 단순히 파인튜닝 수준이 아니라 추가로 훈련시키기로 했다. . 추가 language modeling 훈련 . KoGPT2의 웨이트를 불러온 후, 국립국어원 모두의 말뭉치의 ‘신문 말뭉치 2021’(4.4GB)의 본문을 대상으로 언어모델링을 추가로 진행했다 (epoch:10, batch_size:32, learning_rate: 5e-5, context_length: 128). . fine-tuning . 이후에 epoch:5, learning_rate: 5e-5, context_length:128, batch_size:32로 파인튜닝을 진행했다. 이 때 사용한 데이터셋은 5대 일간지(중앙일보, 조선일보, 한겨레, 동아일보, 경향신문)의 사설 5만여개이다. 각 일간지별로 만여개씩 모았다. 사실 만여개씩 모으면 대략 최근 4-5년치 정도가 되지 않을까 했는데, 실제로 모아보니 대략 10년치였다 (러프하게 계산해보면 언론사별로 1년에 1000개, 하루에 2~3개의 사설을 내는 것이다.) . 더 많은 최신의 신문 데이터를 확보하려면 사설뿐만 아니라 ‘정치’, ‘사회’, ‘경제’ 섹션의 기사들도 모으면 된다. 그런데도 사설만 모아 훈련시킨 이유는 매일매일 가장 주목을 받는 정치적 이슈에 대한 언론사의 대표적 입장이 가장 잘 드러나는 섹션이 사설이기 때문이다. 사설 또한 ‘오피니언’ 섹션의 일부이지만, ‘오피니언’은 말그대로 언론사의 입장과 정반대의 입장도 기고할 수 있는 곳이기 때문에 기자 개인의 이름이 아닌 사명을 달고 내는 사설만 활용하기로 했다. . 사설을 활용한 또다른 이유는 사설은 ‘팩트’ 뿐만 아니라 ‘주장’이 확실히 담고 있기 때문이다. 물론 일반 보도 기사 역시 기자와 편집부의 의견이 간접적으로 담기기는 하지만 대부분의 문장에 가치판단이 빠져 있으나 (e.g. “문재인 대통령은 지난 2일 ~~라고 말했다”, “중대재해법을 어기면 ~한 처벌을 받을 수 있다” 등), 사설에는 어떤 이슈에 대한 가치판단이 담긴 문장이 분명히 나타날 수 밖에 없다. . 128 토큰으로 잘라진 ‘[언론사명]:[사설 내용 일부](e.g. “조선일보:더 심각한 문제는 북한의 의료·방역 수준…”)’ 형태의 배치로 훈련되어 이슈별 언론사별 입장을 학습하도록 했다. .",
            "url": "https://wjlee-ling.github.io/nlp_log/nlp/gpt/aws/flask/kogpt/kogpt2-taf/2022/05/05/tone-and-fact-1.html",
            "relUrl": "/nlp/gpt/aws/flask/kogpt/kogpt2-taf/2022/05/05/tone-and-fact-1.html",
            "date": " • May 5, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://wjlee-ling.github.io/nlp_log/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "NLP Study Log. This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://wjlee-ling.github.io/nlp_log/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://wjlee-ling.github.io/nlp_log/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}